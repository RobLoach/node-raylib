import { Color } from "./types/colors"
import { Vector2, Vector4, Rectangle, NPatchInfo } from "./types/maths"
import { Image, Texture2D, TextureCubemap, Font, RenderTexture2D } from "./types/texture"

export default interface Textures {
  LoadImage: (fileName: string) => Image //Load image from file into CPU memory (RAM) 
  LoadImageEx: (pixels: Color, width: number, height: number) => Image //Load image from Color array data (RGBA - 32bit) 
  LoadImagePro: (data: any, width: number, height: number, format: number) => Image //Load image from raw data with parameters 
  LoadImageRaw: (fileName: string, width: number, height: number, format: number, headerSize: number) => Image //Load image from RAW file data 
  ExportImage: (image: Image, fileName: string) => void //Export image data to file 
  ExportImageAsCode: (image: Image, fileName: string) => void //Export image as code file defining an array of bytes 
  LoadTexture: (fileName: string) => Texture2D //Load texture from file into GPU memory (VRAM) 
  LoadTextureFromImage: (image: Image) => Texture2D //Load texture from image data 
  LoadTextureCubemap: (image: Image, layoutType: number) => TextureCubemap //Load cubemap from image, multiple image cubemap layouts supported 
  LoadRenderTexture: (width: number, height: number) => RenderTexture2D //Load texture for rendering (framebuffer) 
  UnloadImage: (image: Image) => void //Unload image from CPU memory (RAM) 
  UnloadTexture: (texture: Texture2D) => void //Unload texture from GPU memory (VRAM) 
  UnloadRenderTexture: (target: RenderTexture2D) => void //Unload render texture from GPU memory (VRAM) 
  GetImageData: (image: Image) => Color //Get pixel data from image as a Color struct array 
  GetImageDataNormalized: (image: Image) => Vector4 //Get pixel data from image as Vector4 array (float normalized) 
  GetPixelDataSize: (width: number, height: number, format: number) => number //Get pixel data size in bytes (image or texture) 
  GetTextureData: (texture: Texture2D) => Image //Get pixel data from GPU texture and return an Image 
  GetScreenData: () => Image //Get pixel data from screen buffer and return an Image (screenshot) 
  UpdateTexture: (texture: Texture2D, pixels: any) => void //Update GPU texture with new data 
  ImageCopy: (image: Image) => Image //Create an image duplicate (useful for transformations) 
  ImageToPOT: (image: Image, fillColor: Color) => void //Convert image to POT (power-of-two) 
  ImageFormat: (image: Image, newFormat: number) => void //Convert image data to desired format 
  ImageAlphaMask: (image: Image, alphaMask: Image) => void //Apply alpha mask to image 
  ImageAlphaClear: (image: Image, color: Color, threshold: number) => void //Clear alpha channel to desired color 
  ImageAlphaCrop: (image: Image, threshold: number) => void //Crop image depending on alpha value 
  ImageAlphaPremultiply: (image: Image) => void //Premultiply alpha channel 
  ImageCrop: (image: Image, crop: Rectangle) => void //Crop an image to a defined rectangle 
  ImageResize: (image: Image, newWidth: number, newHeight: number) => void //Resize image (Bicubic scaling algorithm) 
  ImageResizeNN: (image: Image, newHeight: number, newWidth: number) => void //Resize image (Nearest-Neighbor scaling algorithm) 
  ImageResizeCanvas: (image: Image, newWidth: number, newHeight: number, offsetX: number, offsetY: number, color: Color) => void //Resize canvas and fill with color 
  ImageMipmaps: (image: Image) => void //Generate all mipmap levels for a provided image 
  ImageDither: (image: Image, rBpp: number, gBpp: number, bBpp: number, aBpp: number) => void //Dither image data to 16bpp or lower (Floyd-Steinberg dithering) 
  ImageExtractPalette: (image: Image, maxPaletteSize: number, extractCount: number) => Color //Extract color palette from image to maximum size (memory should be freed) 
  ImageText: (text: string, fontSize: number, color: Color) => Image //Create an image from text (default font) 
  ImageTextEx: (font: Font, text: string, fontSize: number, spacing: number, tint: Color) => Image //Create an image from text (custom sprite font) 
  ImageDraw: (dst: Image, src: Image, srcRec: Rectangle, dstRec: Rectangle) => void //Draw a source image within a destination image 
  ImageDrawRectangle: (dst: Image, rec: Rectangle, color: Color) => void //Draw rectangle within an image 
  ImageDrawRectangleLines: (dst: Image, rec: Rectangle, thick: number, color: Color) => void //Draw rectangle lines within an image 
  ImageDrawText: (dst: Image, position: Vector2, text: string, fontSize: number, color: Color) => void //Draw text (default font) within an image (destination) 
  ImageDrawTextEx: (dst: Image, position: Vector2, font: Font, text: string, fontSize: number, spacing: number, color: Color) => void //Draw text (custom sprite font) within an image (destination) 
  ImageFlipVertical: (image: Image) => void //Flip image vertically 
  ImageFlipHorizontal: (image: Image) => void //Flip image horizontally 
  ImageRotateCW: (image: Image) => void //Rotate image clockwise 90deg 
  ImageRotateCCW: (image: Image) => void //Rotate image counter-clockwise 90deg 
  ImageColorTint: (image: Image, color: Color) => void //Modify image color: tint 
  ImageColorInvert: (image: Image) => void //Modify image color: invert 
  ImageColorGrayscale: (image: Image) => void //Modify image color: grayscale 
  ImageColorContrast: (image: Image, contrast: number) => void //Modify image color: contrast (-100 to 100) 
  ImageColorBrightness: (image: Image, brightness: number) => void //Modify image color: brightness (-255 to 255) 
  ImageColorReplace: (image: Image, color: Color, replace: Color) => void //Modify image color: replace color 
  GenImageColor: (width: number, height: number, color: Color) => Image //Generate image: plain color 
  GenImageGradientV: (width: number, height: number, top: Color, bottom: Color) => Image //Generate image: vertical gradient 
  GenImageGradientH: (width: number, height: number, left: Color, right: Color) => Image //Generate image: horizontal gradient 
  GenImageGradientRadial: (width: number, height: number, density: number, inner: Color, outer: Color) => Image //Generate image: radial gradient 
  GenImageChecked: (width: number, height: number, checksX: number, checksY: number, col1: Color, col2: Color) => Image //Generate image: checked 
  GenImageWhiteNoise: (width: number, height: number, factor: number) => Image //Generate image: white noise 
  GenImagePerlinNoise: (width: number, height: number, offsetX: number, offsetY: number, scale: number) => Image //Generate image: perlin noise 
  GenImageCellular: (width: number, height: number, tileSize: number) => Image //Generate image: cellular algorithm. Bigger tileSize means bigger cells 
  GenTextureMipmaps: (texture: Texture2D) => void //Generate GPU mipmaps for a texture 
  SetTextureFilter: (texture: Texture2D, filterMode: number) => void //Set texture scaling filter mode 
  SetTextureWrap: (texture: Texture2D, wrapMode: number) => void //Set texture wrapping mode 
  DrawTexture: (texture: Texture2D, posX: number, posY: number, tint: Color) => void //Draw a Texture2D 
  DrawTextureV: (texture: Texture2D, position: Vector2, tint: Color) => void //Draw a Texture2D with position defined as Vector2 
  DrawTextureEx: (texture: Texture2D, position: Vector2, rotation: number, scale: number, tint: Color) => void //Draw a Texture2D with extended parameters 
  DrawTextureRec: (texture: Texture2D, sourceRec: Rectangle, position: Vector2, tint: Color) => void //Draw a part of a texture defined by a rectangle 
  DrawTextureQuad: (texture: Texture2D, tiling: Vector2, offset: Vector2, quad: Rectangle, tint: Color) => void //Draw texture quad with tiling and offset parameters 
  DrawTexturePro: (texture: Texture2D, sourceRec: Rectangle, destRec: Rectangle, origin: Vector2, rotation: number, tint: Color) => void //Draw a part of a texture defined by a rectangle with 'pro' parameters 
  DrawTextureNPatch: (texture: Texture2D, nPatchInfo: NPatchInfo, destRec: Rectangle, origin: Vector2, rotation: number, tint: Color) => void //Draws a texture (or part of it) that stretches or shrinks nicely 
}

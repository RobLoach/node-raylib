import { Color } from "./types/colors"
import { Vector2, Vector3, Vector4, Ray, Matrix } from "./types/maths"
import { Camera, Camera2D, Camera3D } from "./types/camera"
import { Image, RenderTexture2D } from "./types/texture"
import { TraceLogCallback } from "./types/misc"

export default interface Core {
  InitWindow: (width: number, height: number, title: string) => void  //Initialize window and OpenGL context 
  WindowShouldClose: () => boolean  //Check if KEY_ESCAPE pressed or Close icon pressed 
  CloseWindow: () => void  //Close window and unload OpenGL context 
  IsWindowReady: () => boolean  //Check if window has been initialized successfully 
  IsWindowMinimized: () => boolean  //Check if window has been minimized (or lost focus) 
  IsWindowResized: () => boolean  //Check if window has been resized 
  IsWindowHidden: () => boolean  //Check if window is currently hidden 
  ToggleFullscreen: () => void  //Toggle fullscreen mode (only PLATFORM_DESKTOP) 
  UnhideWindow: () => void  //Show the window 
  HideWindow: () => void  //Hide the window 
  SetWindowIcon: (image: Image) => void  //Set icon for window (only PLATFORM_DESKTOP) 
  SetWindowTitle: (title: string) => void  //Set title for window (only PLATFORM_DESKTOP) 
  SetWindowPosition: (x: number, y: number) => void  //Set window position on screen (only PLATFORM_DESKTOP) 
  SetWindowMonitor: (monitor: number) => void  //Set monitor for the current window (fullscreen mode) 
  SetWindowMinSize: (width: number, height: number) => void  //Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE) 
  SetWindowSize: (width: number, height: number) => void  //Set window dimensions 
  GetWindowHandle: () => void  //Get native window handle 
  GetScreenWidth: () => number  //Get current screen width 
  GetScreenHeight: () => number  //Get current screen height 
  GetMonitorCount: () => number  //Get number of connected monitors 
  GetMonitorWidth: (monitor: number) => number  //Get primary monitor width 
  GetMonitorHeight: (monitor: number) => number  //Get primary monitor height 
  GetMonitorPhysicalWidth: (monitor: number) => number  //Get primary monitor physical width in millimetres 
  GetMonitorPhysicalHeight: (monitor: number) => number  //Get primary monitor physical height in millimetres 
  GetMonitorName: (monitor: number) => string  //Get the human-readable, UTF-8 encoded name of the primary monitor 
  GetClipboardText: () => string  //Get clipboard text content 
  SetClipboardText: (text: string) => void  //Set clipboard text content 
  ShowCursor: () => void  //Shows cursor 
  HideCursor: () => void  //Hides cursor 
  IsCursorHidden: () => boolean  //Check if cursor is not visible 
  EnableCursor: () => void  //Enables cursor (unlock cursor) 
  DisableCursor: () => void  //Disables cursor (lock cursor) 
  ClearBackground: (color: Color) => void  //Set background color (framebuffer clear color) 
  BeginDrawing: () => void  //Setup canvas (framebuffer) to start drawing 
  EndDrawing: () => void  //End canvas drawing and swap buffers (double buffering) 
  BeginMode2D: (camera: Camera2D) => void  //Initialize 2D mode with custom camera (2D) 
  EndMode2D: () => void  //Ends 2D mode with custom camera 
  BeginMode3D: (camera: Camera3D) => void  //Initializes 3D mode with custom camera (3D) 
  EndMode3D: () => void  //Ends 3D mode and returns to default 2D orthographic mode 
  BeginTextureMode: (target: RenderTexture2D) => void  //Initializes render texture for drawing 
  EndTextureMode: () => void  //Ends drawing to render texture 
  GetMouseRay: (mousePosition: Vector2, camera: Camera) => Ray  //Returns a ray trace from mouse position 
  GetWorldToScreen: (position: Vector3, camera: Camera) => Vector2  //Returns the screen space position for a 3d world space position 
  GetCameraMatrix: (camera: Camera) => Matrix  //Returns camera transform matrix (view matrix) 
  SetTargetFPS: (fps: number) => void  //Set target FPS (maximum) 
  GetFPS: () => number  //Returns current FPS 
  GetFrameTime: () => number  //Returns time in seconds for last frame drawn 
  GetTime: () => number  //Returns elapsed time in seconds since InitWindow() 
  ColorToInt: (color: Color) => number  //Returns hexadecimal value for a Color 
  ColorNormalize: (color: Color) => Vector4  //Returns color normalized as float [0..1] 
  ColorToHSV: (color: Color) => Vector3  //Returns HSV values for a Color 
  ColorFromHSV: (hsv: Vector3) => Color  //Returns a Color from HSV values 
  GetColor: (hexValue: number) => Color  //Returns a Color struct from hexadecimal value 
  Fade: (color: Color, alpha: number) => Color  //Color fade-in or fade-out, alpha goes from 0.0f to 1.0f 
  SetConfigFlags: (flags: number) => void  //Setup window configuration flags (view FLAGS) 
  SetTraceLogLevel: (logType: number) => void  //Set the current threshold (minimum) log level 
  SetTraceLogExit: (logType: number) => void  //Set the exit threshold (minimum) log level 
  SetTraceLogCallback: (callback: TraceLogCallback) => void  //Set a trace log callback to enable custom logging 
  TraceLog: (logType: number, text: string, ...args: any) => void  //Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR) 
  TakeScreenshot: (fileName: string) => void  //Takes a screenshot of current screen (saved a .png) 
  GetRandomValue: (min: number, max: number) => number  //Returns a random value between min and max (both included) 
  FileExists: (fileName: string) => boolean  //Check if file exists 
  IsFileExtension: (fileName: string, ext: string) => boolean  //Check file extension 
  GetExtension: (fileName: string) => string  //Get pointer to extension for a filename string 
  GetFileName: (filePath: string) => string  //Get pointer to filename for a path string 
  GetFileNameWithoutExt: (filePath: string) => string  //Get filename string without extension (memory should be freed) 
  GetDirectoryPath: (fileName: string) => string  //Get full path for a given fileName (uses static string) 
  GetWorkingDirectory: () => string  //Get current working directory (uses static string) 
  GetDirectoryFiles: (dirPath: string, count: number) => number  //Get filenames in a directory path (memory should be freed) 
  ClearDirectoryFiles: () => void  //Clear directory files paths buffers (free memory) 
  ChangeDirectory: (dir: string) => boolean  //Change working directory, returns true if success 
  IsFileDropped: () => boolean  //Check if a file has been dropped into window 
  GetDroppedFiles: (count: number) => number  //Get dropped files names (memory should be freed) 
  ClearDroppedFiles: () => void  //Clear dropped files paths buffer (free memory) 
  GetFileModTime: (fileName: string) => number  //Get file modification time (last write time) 
  StorageSaveValue: (position: number, value: number) => void  //Save integer value to storage file (to defined position) 
  StorageLoadValue: (position: number) => number  //Load integer value from storage file (from defined position) 
  OpenURL: (url: string) => void  //Open URL with default system browser (if available) 
  IsKeyPressed: (key: number) => boolean  //Detect if a key has been pressed once 
  IsKeyDown: (key: number) => boolean  //Detect if a key is being pressed 
  IsKeyReleased: (key: number) => boolean  //Detect if a key has been released once 
  IsKeyUp: (key: number) => boolean  //Detect if a key is NOT being pressed 
  GetKeyPressed: () => number  //Get latest key pressed 
  SetExitKey: (key: number) => void  //Set a custom key to exit program (default is ESC) 
  IsGamepadAvailable: (gamepad: number) => boolean  //Detect if a gamepad is available 
  IsGamepadName: (gamepad: number, name: string) => boolean  //Check gamepad name (if available) 
  GetGamepadName: (gamepad: number) => string  //Return gamepad internal name id 
  IsGamepadButtonPressed: (gamepad: number, button: number) => boolean  //Detect if a gamepad button has been pressed once 
  IsGamepadButtonDown: (gamepad: number, button: number) => boolean  //Detect if a gamepad button is being pressed 
  IsGamepadButtonReleased: (gamepad: number, button: number) => boolean  //Detect if a gamepad button has been released once 
  IsGamepadButtonUp: (gamepad: number, button: number) => boolean  //Detect if a gamepad button is NOT being pressed 
  GetGamepadButtonPressed: () => number  //Get the last gamepad button pressed 
  GetGamepadAxisCount: (gamepad: number) => number  //Return gamepad axis count for a gamepad 
  GetGamepadAxisMovement: (gamepad: number, axis: number) => number  //Return axis movement value for a gamepad axis 
  IsMouseButtonPressed: (button: number) => boolean  //Detect if a mouse button has been pressed once 
  IsMouseButtonDown: (button: number) => boolean  //Detect if a mouse button is being pressed 
  IsMouseButtonReleased: (button: number) => boolean  //Detect if a mouse button has been released once 
  IsMouseButtonUp: (button: number) => boolean  //Detect if a mouse button is NOT being pressed 
  GetMouseX: () => number  //Returns mouse position X 
  GetMouseY: () => number  //Returns mouse position Y 
  GetMousePosition: () => Vector2  //Returns mouse position XY 
  SetMousePosition: (x: number, y: number) => void  //Set mouse position XY 
  SetMouseOffset: (offsetX: number, offsetY: number) => void  //Set mouse offset 
  SetMouseScale: (scaleX: number, scaleY: number) => void  //Set mouse scaling 
  GetMouseWheelMove: () => number  //Returns mouse wheel movement Y 
  GetTouchX: () => number  //Returns touch position X for touch point 0 (relative to screen size) 
  GetTouchY: () => number  //Returns touch position Y for touch point 0 (relative to screen size) 
  GetTouchPosition: (index: number) => Vector2  //Returns touch position XY for a touch point index (relative to screen size) 
  SetGesturesEnabled: (gestureFlags: number) => void  //Enable a set of gestures using flags 
  IsGestureDetected: (gesture: number) => boolean  //Check if a gesture have been detected 
  GetGestureDetected: () => number  //Get latest detected gesture 
  GetTouchPointsCount: () => number  //Get touch points count 
  GetGestureHoldDuration: () => number  //Get gesture hold time in milliseconds 
  GetGestureDragVector: () => Vector2  //Get gesture drag vector 
  GetGestureDragAngle: () => number  //Get gesture drag angle 
  GetGesturePinchVector: () => Vector2  //Get gesture pinch delta 
  GetGesturePinchAngle: () => number  //Get gesture pinch angle 
  SetCameraMode: (camera: Camera, mode: number) => void  //Set camera mode (multiple camera modes available) 
  UpdateCamera: (camera: Camera) => void  //Update camera position for selected mode 
  SetCameraPanControl: (panKey: number) => void  //Set camera pan key to combine with mouse movement (free camera) 
  SetCameraAltControl: (altKey: number) => void  //Set camera alt key to combine with mouse movement (free camera) 
  SetCameraSmoothZoomControl: (szKey: number) => void  //Set camera smooth zoom key to combine with mouse (free camera) 
  SetCameraMoveControls: (frontKey: number, backKey: number, rightKey: number, leftKey: number, upKey: number, downKey: number) => void  //Set camera move controls (1st person and 3rd person cameras) 
}
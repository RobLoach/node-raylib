name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: create_release
        id: create_release
        uses: actions/create-release@v1
        with:
          draft: false
          prerelease: false
          release_name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}. 

            This release includes prebuilt binaries for faster `npm install` on supported platforms.

            ## Changes
            See the [commit history](https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}) for detailed changes.
        env:
          GITHUB_TOKEN: ${{ github.token }}
  # linux-arm-drm:
  #   runs-on: ubuntu-latest
  #   needs: create_release
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Build for arm DRM
  #       run: docker run --platform linux/arm/v7 --rm -v "${PWD}:/work" -w /work node:20-bullseye ./tools/crossbuild-drm.sh
  #     - name: upload linux artifact
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         upload_url: ${{ needs.create_release.outputs.upload_url }}
  #         asset_path: ./build/Release/node-raylib.node
  #         asset_name: node-raylib-linux-arm-drm.node
  #         asset_content_type: application/octet-stream
  linux-arm64-drm:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Build for arm64 DRM
        run: docker run --platform linux/arm64 --rm -v "${PWD}:/work" -w /work node:20-bullseye ./tools/crossbuild-drm.sh
      - name: upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/Release/node-raylib.node
          asset_name: node-raylib-linux-arm64-drm.node
          asset_content_type: application/octet-stream

  # linux-arm:
  #   runs-on: ubuntu-latest
  #   needs: create_release
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Build for arm
  #       run: docker run --platform linux/arm/v7 --rm -v "${PWD}:/work" -w /work node:20-bullseye ./tools/crossbuild.sh
  #     - name: upload linux artifact
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         upload_url: ${{ needs.create_release.outputs.upload_url }}
  #         asset_path: ./build/Release/node-raylib.node
  #         asset_name: node-raylib-linux-arm.node
  #         asset_content_type: application/octet-stream

  # linux-arm64:
  #   runs-on: ubuntu-latest
  #   needs: create_release
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Build for arm64
  #       run: docker run --platform linux/arm64 --rm -v "${PWD}:/work" -w /work node:20-bullseye ./tools/crossbuild.sh
  #     - name: upload linux artifact
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         upload_url: ${{ needs.create_release.outputs.upload_url }}
  #         asset_path: ./build/Release/node-raylib.node
  #         asset_name: node-raylib-linux-arm64.node
  #         asset_content_type: application/octet-stream
  # linux:
  #   runs-on: ubuntu-latest
  #   needs: create_release
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Install Node Dependencies
  #       run: npm ci --ignore-scripts
  #     - name: Install System Dependencies
  #       run: sudo apt-get update && sudo apt-get install -y xorg-dev libglu1-mesa-dev
  #     - name: Build Node Addon
  #       run: npm run compile
  #     - name: upload linux artifact
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         upload_url: ${{ needs.create_release.outputs.upload_url }}
  #         asset_path: ./build/Release/node-raylib.node
  #         asset_name: node-raylib-linux-x64.node
  #         asset_content_type: application/octet-stream

  # windows:
  #   runs-on: windows-latest
  #   needs: create_release
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Install Node Dependencies
  #       run: npm ci --ignore-scripts
  #     - name: Build Node Addon
  #       run: npm run compile
  #     - name: upload windows artifact
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         upload_url: ${{ needs.create_release.outputs.upload_url }}
  #         asset_path: ./build/Release/node-raylib.node
  #         asset_name: node-raylib-win32-x64.node
  #         asset_content_type: application/octet-stream

  # macos-x64:
  #   runs-on: macos-13  # Intel runner
  #   needs: create_release
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Install Node Dependencies
  #       run: npm ci --ignore-scripts
  #     - name: Build Node Addon
  #       run: npm run compile
  #     - name: upload macos x64 artifact
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         upload_url: ${{ needs.create_release.outputs.upload_url }}
  #         asset_path: ./build/Release/node-raylib.node
  #         asset_name: node-raylib-darwin-x64.node
  #         asset_content_type: application/octet-stream

  # macos-arm64:
  #   runs-on: macos-latest  # Apple Silicon runner
  #   needs: create_release
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Install Node Dependencies
  #       run: npm ci --ignore-scripts
  #     - name: Build Node Addon
  #       run: npm run compile
  #     - name: upload macos arm64 artifact
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         upload_url: ${{ needs.create_release.outputs.upload_url }}
  #         asset_path: ./build/Release/node-raylib.node
  #         asset_name: node-raylib-darwin-arm64.node
  #         asset_content_type: application/octet-stream

/**
 * node-raylib
 *
 * https://github.com/robloach/node-raylib
 */
import r from "./src/bindings/raylib";
import * as colors from "./src/types/colors";
import * as camera from "./src/types/camera";
import * as maths from "./src/types/maths";
import * as shaders from "./src/shaders";
declare const raylib: {
    InitAudioDevice: () => void;
    CloseAudioDevice: () => void;
    IsAudioDeviceReady: () => boolean;
    SetMasterVolume: (volume: number) => void;
    LoadWave: (fileName: string) => any;
    LoadWaveEx: (channels: number) => any;
    LoadSound: (fileName: string) => any;
    LoadSoundFromWave: (wave: any) => any;
    UpdateSound: (samplesCount: number) => void;
    UnloadWave: (wave: any) => void;
    UnloadSound: (sound: any) => void;
    ExportWave: (fileName: string) => void;
    ExportWaveAsCode: (fileName: string) => void;
    PlaySound: (sound: any) => void;
    PauseSound: (sound: any) => void;
    ResumeSound: (sound: any) => void;
    StopSound: (sound: any) => void;
    IsSoundPlaying: (sound: any) => boolean;
    SetSoundVolume: (volume: number) => void;
    SetSoundPitch: (pitch: number) => void;
    WaveFormat: (channels: number) => void;
    WaveCopy: (wave: any) => any;
    WaveCrop: (finalSample: number) => void;
    GetWaveData: (wave: any) => number;
    LoadMusicStream: (fileName: string) => any;
    UnloadMusicStream: (music: any) => void;
    PlayMusicStream: (music: any) => void;
    UpdateMusicStream: (music: any) => void;
    StopMusicStream: (music: any) => void;
    PauseMusicStream: (music: any) => void;
    ResumeMusicStream: (music: any) => void;
    IsMusicPlaying: (music: any) => boolean;
    SetMusicVolume: (volume: number) => void;
    SetMusicPitch: (pitch: number) => void;
    SetMusicLoopCount: (count: number) => void;
    GetMusicTimeLength: (music: any) => number;
    GetMusicTimePlayed: (music: any) => number;
    InitAudioStream: (channels: number) => any;
    UpdateAudioStream: (samplesCount: number) => void;
    CloseAudioStream: (stream: any) => void;
    IsAudioBufferProcessed: (stream: any) => boolean;
    PlayAudioStream: (stream: any) => void;
    PauseAudioStream: (stream: any) => void;
    ResumeAudioStream: (stream: any) => void;
    IsAudioStreamPlaying: (stream: any) => boolean;
    StopAudioStream: (stream: any) => void;
    SetAudioStreamVolume: (volume: number) => void;
    SetAudioStreamPitch: (pitch: number) => void;
    Shader: typeof shaders.Shader;
    LoadText: (fileName: string) => string;
    LoadShader: (fsFileName: string) => shaders.Shader;
    LoadShaderCode: (fsCode: string) => shaders.Shader;
    UnloadShader: (shader: shaders.Shader) => void;
    GetShaderDefault: () => shaders.Shader;
    GetTextureDefault: () => any;
    GetShaderLocation: (uniformName: string) => number;
    SetShaderValue: (uniformType: number) => void;
    SetShaderValueV: (count: number) => void;
    SetShaderValueMatrix: (mat: any) => void;
    SetShaderValueTexture: (texture: any) => void;
    SetMatrixProjection: (proj: any) => void;
    SetMatrixModelview: (view: any) => void;
    GetMatrixModelview: () => any;
    BeginShaderMode: (shader: shaders.Shader) => void;
    EndShaderMode: () => void;
    BeginBlendMode: (mode: number) => void;
    EndBlendMode: () => void;
    BeginScissorMode: (height: number) => void;
    EndScissorMode: () => void;
    InitVrSimulator: () => void;
    CloseVrSimulator: () => void;
    UpdateVrTracking: (camera: camera.Camera3D) => void;
    SetVrConfiguration: (distortion: shaders.Shader) => void;
    IsVrSimulatorReady: () => boolean;
    ToggleVrMode: () => void;
    BeginVrDrawing: () => void;
    EndVrDrawing: () => void;
    DrawLine3D: (color: colors.Color) => void;
    DrawCircle3D: (color: colors.Color) => void;
    DrawCube: (color: colors.Color) => void;
    DrawCubeV: (color: colors.Color) => void;
    DrawCubeWires: (color: colors.Color) => void;
    DrawCubeWiresV: (color: colors.Color) => void;
    DrawCubeTexture: (color: colors.Color) => void;
    DrawSphere: (color: colors.Color) => void;
    DrawSphereEx: (color: colors.Color) => void;
    DrawSphereWires: (color: colors.Color) => void;
    DrawCylinder: (color: colors.Color) => void;
    DrawCylinderWires: (color: colors.Color) => void;
    DrawPlane: (color: colors.Color) => void;
    DrawRay: (color: colors.Color) => void;
    DrawGrid: (spacing: number) => void;
    DrawGizmo: (position: maths.Vector3) => void;
    LoadModel: (fileName: string) => any;
    LoadModelFromMesh: (mesh: any) => any;
    UnloadModel: (model: any) => void;
    LoadMeshes: (meshCount: number) => any;
    ExportMesh: (fileName: string) => void;
    UnloadMesh: (mesh: any) => void;
    LoadMaterials: (materialCount: number) => any;
    LoadMaterialDefault: () => any;
    UnloadMaterial: (material: any) => void;
    SetMaterialTexture: (texture: any) => void;
    SetModelMeshMaterial: (materialId: number) => void;
    LoadModelAnimations: (animsCount: number) => any;
    UpdateModelAnimation: (frame: number) => void;
    UnloadModelAnimation: (anim: any) => void;
    IsModelAnimationValid: (anim: any) => boolean;
    GenMeshPoly: (radius: number) => any;
    GenMeshPlane: (resZ: number) => any;
    GenMeshCube: (length: number) => any;
    GenMeshSphere: (slices: number) => any;
    GenMeshHemiSphere: (slices: number) => any;
    GenMeshCylinder: (slices: number) => any;
    GenMeshTorus: (sides: number) => any;
    GenMeshKnot: (sides: number) => any;
    GenMeshHeightmap: (size: maths.Vector3) => any;
    GenMeshCubicmap: (cubeSize: maths.Vector3) => any;
    MeshBoundingBox: (mesh: any) => any;
    MeshTangents: (mesh: any) => void;
    MeshBinormals: (mesh: any) => void;
    DrawModel: (tint: colors.Color) => void;
    DrawModelEx: (tint: colors.Color) => void;
    DrawModelWires: (tint: colors.Color) => void;
    DrawModelWiresEx: (tint: colors.Color) => void;
    DrawBoundingBox: (color: colors.Color) => void;
    DrawBillboard: (tint: colors.Color) => void;
    DrawBillboardRec: (tint: colors.Color) => void;
    CheckCollisionSpheres: (radiusB: number) => boolean;
    CheckCollisionBoxes: (box2: any) => boolean;
    CheckCollisionBoxSphere: (radiusSphere: number) => boolean;
    CheckCollisionRaySphere: (sphereRadius: number) => boolean;
    CheckCollisionRaySphereEx: (collisionPoint: maths.Vector3) => boolean;
    CheckCollisionRayBox: (box: any) => boolean;
    GetCollisionRayModel: (model: any) => any;
    GetCollisionRayTriangle: (p3: maths.Vector3) => any;
    GetCollisionRayGround: (groundHeight: number) => any;
    GetFontDefault: () => any;
    LoadFont: (fileName: string) => any;
    LoadFontEx: (charsCount: number) => any;
    LoadFontFromImage: (firstChar: number) => any;
    LoadFontData: (type: number) => any;
    GenImageFontAtlas: (packMethod: number) => any;
    UnloadFont: (font: any) => void;
    DrawFPS: (posY: number) => void;
    DrawText: (stringcolor: colors.Color) => void;
    DrawTextEx: (tint: colors.Color) => void;
    DrawTextRec: (tint: colors.Color) => void;
    DrawTextRecEx: (selectBack: colors.Color) => void;
    MeasureText: (fontSize: number) => number;
    MeasureTextEx: (spacing: number) => maths.Vector2;
    GetGlyphIndex: (character: number) => number;
    TextIsEqual: (text2: string) => boolean;
    TextLength: (text: string) => number;
    TextFormat: (...: any) => string;
    TextSubtext: (length: number) => string;
    TextReplace: (by: string) => string;
    TextInsert: (position: number) => string;
    TextJoin: (delimiter: string) => string;
    TextSplit: (count: number) => string;
    TextAppend: (position: number) => void;
    TextFindIndex: (find: string) => number;
    TextToUpper: (text: string) => string;
    TextToLower: (text: string) => string;
    TextToPascal: (text: string) => string;
    TextToInteger: (text: string) => number;
    LoadImage: (fileName: string) => any;
    LoadImageEx: (height: number) => any;
    LoadImagePro: (format: number) => any;
    LoadImageRaw: (headerSize: number) => any;
    ExportImage: (fileName: string) => void;
    ExportImageAsCode: (fileName: string) => void;
    LoadTexture: (fileName: string) => any;
    LoadTextureFromImage: (image: any) => any;
    LoadTextureCubemap: (layoutType: number) => any;
    LoadRenderTexture: (height: number) => any;
    UnloadImage: (image: any) => void;
    UnloadTexture: (texture: any) => void;
    UnloadRenderTexture: (target: any) => void;
    GetImageData: (image: any) => colors.Color;
    GetImageDataNormalized: (image: any) => any;
    GetPixelDataSize: (format: number) => number;
    GetTextureData: (texture: any) => any;
    GetScreenData: () => any;
    UpdateTexture: (pixels: any, : any) => void;
    ImageCopy: (image: any) => any;
    ImageToPOT: (fillColor: colors.Color) => void;
    ImageFormat: (newFormat: number) => void;
    ImageAlphaMask: (alphaMask: any) => void;
    ImageAlphaClear: (threshold: number) => void;
    ImageAlphaCrop: (threshold: number) => void;
    ImageAlphaPremultiply: (image: any) => void;
    ImageCrop: (crop: any) => void;
    ImageResize: (newHeight: number) => void;
    ImageResizeNN: (newHeight: any, newWidth: any, int: any) => void;
    ImageResizeCanvas: (color: colors.Color) => void;
    ImageMipmaps: (image: any) => void;
    ImageDither: (aBpp: number) => void;
    ImageExtractPalette: (extractCount: number) => colors.Color;
    ImageText: (color: colors.Color) => any;
    ImageTextEx: (tint: colors.Color) => any;
    ImageDraw: (dstRec: any) => void;
    ImageDrawRectangle: (color: colors.Color) => void;
    ImageDrawRectangleLines: (color: colors.Color) => void;
    ImageDrawText: (color: colors.Color) => void;
    ImageDrawTextEx: (color: colors.Color) => void;
    ImageFlipVertical: (image: any) => void;
    ImageFlipHorizontal: (image: any) => void;
    ImageRotateCW: (image: any) => void;
    ImageRotateCCW: (image: any) => void;
    ImageColorTint: (color: colors.Color) => void;
    ImageColorInvert: (image: any) => void;
    ImageColorGrayscale: (image: any) => void;
    ImageColorContrast: (contrast: number) => void;
    ImageColorBrightness: (brightness: number) => void;
    ImageColorReplace: (replace: colors.Color) => void;
    GenImageColor: (color: colors.Color) => any;
    GenImageGradientV: (bottom: colors.Color) => any;
    GenImageGradientH: (right: colors.Color) => any;
    GenImageGradientRadial: (outer: colors.Color) => any;
    GenImageChecked: (col2: colors.Color) => any;
    GenImageWhiteNoise: (factor: number) => any;
    GenImagePerlinNoise: (scale: number) => any;
    GenImageCellular: (tileSize: number) => any;
    GenTextureMipmaps: (texture: any) => void;
    SetTextureFilter: (filterMode: number) => void;
    SetTextureWrap: (wrapMode: number) => void;
    DrawTexture: (tint: colors.Color) => void;
    DrawTextureV: (tint: colors.Color) => void;
    DrawTextureEx: (tint: colors.Color) => void;
    DrawTextureRec: (tint: colors.Color) => void;
    DrawTextureQuad: (tint: colors.Color) => void;
    DrawTexturePro: (tint: colors.Color) => void;
    DrawTextureNPatch: (tint: colors.Color) => void;
    DrawPixel: (color: colors.Color) => void;
    DrawPixelV: (color: colors.Color) => void;
    DrawLine: (color: colors.Color) => void;
    DrawLineV: (color: colors.Color) => void;
    DrawLineEx: (color: colors.Color) => void;
    DrawLineBezier: (color: colors.Color) => void;
    DrawLineStrip: (color: colors.Color) => void;
    DrawCircle: (color: colors.Color) => void;
    DrawCircleSector: (color: colors.Color) => void;
    DrawCircleSectorLines: (color: colors.Color) => void;
    DrawCircleGradient: (color2: colors.Color) => void;
    DrawCircleV: (color: colors.Color) => void;
    DrawCircleLines: (color: colors.Color) => void;
    DrawRing: (color: colors.Color) => void;
    DrawRingLines: (color: colors.Color) => void;
    DrawRectangle: (color: colors.Color) => void;
    DrawRectangleV: (color: colors.Color) => void;
    DrawRectangleRec: (color: colors.Color) => void;
    DrawRectanglePro: (color: colors.Color) => void;
    DrawRectangleGradientV: (color2: colors.Color) => void;
    DrawRectangleGradientH: (color2: colors.Color) => void;
    DrawRectangleGradientEx: (col4: colors.Color) => void;
    DrawRectangleLines: (color: colors.Color) => void;
    DrawRectangleLinesEx: (color: colors.Color) => void;
    DrawRectangleRounded: (color: colors.Color) => void;
    DrawRectangleRoundedLines: (color: colors.Color) => void;
    DrawTriangle: (color: colors.Color) => void;
    DrawTriangleLines: (color: colors.Color) => void;
    DrawTriangleFan: (color: colors.Color) => void;
    DrawPoly: (color: colors.Color) => void;
    SetShapesTexture: (source: any) => void;
    CheckCollisionRecs: (rec2: any) => boolean;
    CheckCollisionCircles: (radius2: number) => boolean;
    CheckCollisionCircleRec: (rec: any) => boolean;
    GetCollisionRec: (rec2: any) => any;
    CheckCollisionPointRec: (rec: any) => boolean;
    CheckCollisionPointCircle: (radius: number) => boolean;
    CheckCollisionPointTriangle: (p3: maths.Vector2) => boolean;
    InitWindow: (title: string) => void;
    WindowShouldClose: () => boolean;
    CloseWindow: () => void;
    IsWindowReady: () => boolean;
    IsWindowMinimized: () => boolean;
    IsWindowResized: () => boolean;
    IsWindowHidden: () => boolean;
    ToggleFullscreen: () => void;
    UnhideWindow: () => void;
    HideWindow: () => void;
    SetWindowIcon: (image: any) => void;
    SetWindowTitle: (title: string) => void;
    SetWindowPosition: (y: number) => void;
    SetWindowMonitor: (monitor: number) => void;
    SetWindowMinSize: (height: number) => void;
    SetWindowSize: (height: number) => void;
    GetWindowHandle: () => void;
    GetScreenWidth: () => number;
    GetScreenHeight: () => number;
    GetMonitorCount: () => number;
    GetMonitorWidth: (monitor: number) => number;
    GetMonitorHeight: (monitor: number) => number;
    GetMonitorPhysicalWidth: (monitor: number) => number;
    GetMonitorPhysicalHeight: (monitor: number) => number;
    GetMonitorName: (monitor: number) => string;
    GetClipboardText: () => string;
    SetClipboardText: (text: string) => void;
    ShowCursor: () => void;
    HideCursor: () => void;
    IsCursorHidden: () => boolean;
    EnableCursor: () => void;
    DisableCursor: () => void;
    ClearBackground: (color: colors.Color) => void;
    BeginDrawing: () => void;
    EndDrawing: () => void;
    BeginMode2D: (camera: camera.Camera2D) => void;
    EndMode2D: () => void;
    BeginMode3D: (camera: camera.Camera3D) => void;
    EndMode3D: () => void;
    BeginTextureMode: (target: any) => void;
    EndTextureMode: () => void;
    GetMouseRay: (camera: camera.Camera3D) => any;
    GetWorldToScreen: (camera: camera.Camera3D) => maths.Vector2;
    GetCameraMatrix: (camera: camera.Camera3D) => any;
    SetTargetFPS: (fps: number) => void;
    GetFPS: () => number;
    GetFrameTime: () => number;
    GetTime: () => number;
    ColorToInt: (color: colors.Color) => number;
    ColorNormalize: (color: colors.Color) => maths.Vector4;
    ColorToHSV: (color: colors.Color) => maths.Vector3;
    ColorFromHSV: (hsv: maths.Vector3) => colors.Color;
    GetColor: (hexValue: number) => colors.Color;
    Fade: (alpha: number) => colors.Color;
    SetConfigFlags: (flags: number) => void;
    SetTraceLogLevel: (logType: number) => void;
    SetTraceLogExit: (logType: number) => void;
    SetTraceLogCallback: (callback: any) => void;
    TraceLog: (...msg: any) => void;
    TakeScreenshot: (fileName: string) => void;
    GetRandomValue: (max: number) => number;
    FileExists: (fileName: string) => boolean;
    IsFileExtension: (ext: string) => boolean;
    GetExtension: (fileName: string) => string;
    GetFileName: (filePath: string) => string;
    GetFileNameWithoutExt: (filePath: string) => string;
    GetDirectoryPath: (fileName: string) => string;
    GetWorkingDirectory: () => string;
    GetDirectoryFiles: (count: number) => number;
    ClearDirectoryFiles: () => void;
    ChangeDirectory: (dir: string) => boolean;
    IsFileDropped: () => boolean;
    GetDroppedFiles: (count: number) => number;
    ClearDroppedFiles: () => void;
    GetFileModTime: (fileName: string) => number;
    StorageSaveValue: (value: number) => void;
    StorageLoadValue: (position: number) => number;
    OpenURL: (url: string) => void;
    IsKeyPressed: (key: number) => boolean;
    IsKeyDown: (key: number) => boolean;
    IsKeyReleased: (key: number) => boolean;
    IsKeyUp: (key: number) => boolean;
    GetKeyPressed: () => number;
    SetExitKey: (key: number) => void;
    IsGamepadAvailable: (gamepad: number) => boolean;
    IsGamepadName: (name: string) => boolean;
    GetGamepadName: (gamepad: number) => string;
    IsGamepadButtonPressed: (button: number) => boolean;
    IsGamepadButtonDown: (button: number) => boolean;
    IsGamepadButtonReleased: (button: number) => boolean;
    IsGamepadButtonUp: (button: number) => boolean;
    GetGamepadButtonPressed: () => number;
    GetGamepadAxisCount: (gamepad: number) => number;
    GetGamepadAxisMovement: (axis: number) => number;
    IsMouseButtonPressed: (button: number) => boolean;
    IsMouseButtonDown: (button: number) => boolean;
    IsMouseButtonReleased: (button: number) => boolean;
    IsMouseButtonUp: (button: number) => boolean;
    GetMouseX: () => number;
    GetMouseY: () => number;
    GetMousePosition: () => maths.Vector2;
    SetMousePosition: (y: number) => void;
    SetMouseOffset: (offsetY: number) => void;
    SetMouseScale: (scaleY: number) => void;
    GetMouseWheelMove: () => number;
    GetTouchX: () => number;
    GetTouchY: () => number;
    GetTouchPosition: (index: number) => maths.Vector2;
    SetGesturesEnabled: (gestureFlags: number) => void;
    IsGestureDetected: (gesture: number) => boolean;
    GetGestureDetected: () => number;
    GetTouchPointsCount: () => number;
    GetGestureHoldDuration: () => number;
    GetGestureDragVector: () => maths.Vector2;
    GetGestureDragAngle: () => number;
    GetGesturePinchVector: () => maths.Vector2;
    GetGesturePinchAngle: () => number;
    SetCameraMode: (mode: number) => void;
    UpdateCamera: (camera: camera.Camera3D) => void;
    SetCameraPanControl: (panKey: number) => void;
    SetCameraAltControl: (altKey: number) => void;
    SetCameraSmoothZoomControl: (szKey: number) => void;
    SetCameraMoveControls: (downKey: number) => void;
    /**
     * node-raylib
     *
     * https://github.com/robloach/node-raylib
     */
    Vector2: typeof maths.Vector2;
    Vector3: typeof maths.Vector3;
    Vector4: typeof maths.Vector4;
    Rectangle: typeof maths.Rectangle;
    Ray: typeof maths.Ray;
    RayHitInfo: typeof maths.RayHitInfo;
    Camera3D: typeof camera.Camera3D;
    Camera2D: typeof camera.Camera2D;
    /**
     * node-raylib
     *
     * https://github.com/robloach/node-raylib
     */
    Color: typeof colors.Color;
    LIGHTGRAY: colors.Color;
    GRAY: colors.Color;
    DARKGRAY: colors.Color;
    YELLOW: colors.Color;
    GOLD: colors.Color;
    ORANGE: colors.Color;
    PINK: colors.Color;
    RED: colors.Color;
    MAROON: colors.Color;
    GREEN: colors.Color;
    LIME: colors.Color;
    DARKGREEN: colors.Color;
    SKYBLUE: colors.Color;
    BLUE: colors.Color;
    DARKBLUE: colors.Color;
    PURPLE: colors.Color;
    VIOLET: colors.Color;
    DARKPURPLE: colors.Color;
    BEIGE: colors.Color;
    BROWN: colors.Color;
    DARKBROWN: colors.Color;
    WHITE: colors.Color;
    BLACK: colors.Color;
    BLANK: colors.Color;
    MAGENTA: colors.Color;
    RAYWHITE: colors.Color;
    PI: number;
    MAX_TOUCH_POINTS: number;
    MAX_SHADER_LOCATIONS: number;
    MAX_MATERIAL_MAPS: number;
    DEG2RAD: number;
    RAD2DEG: number;
};
export default raylib;
export { r };

/**
 * node-raylib
 *
 * https://github.com/robloach/node-raylib
 */
import r from "./src/bindings/raylib";
import * as colors from "./src/types/colors";
import * as camera from "./src/types/camera";
import * as maths from "./src/types/maths";
import * as shaders from "./src/shaders";
import * as audio from "./src/audio";
declare const raylib: {
    InitAudioDevice: () => void;
    CloseAudioDevice: () => void;
    IsAudioDeviceReady: () => boolean;
    SetMasterVolume: (volume: number) => void;
    LoadWave: (fileName: string) => audio.Wave;
    LoadWaveEx: (data: void, sampleCount: number, sampleRate: number, sampleSize: number, channels: number) => audio.Wave;
    LoadSound: (fileName: string) => audio.Sound;
    LoadSoundFromWave: (wave: audio.Wave) => audio.Sound;
    UpdateSound: (sound: audio.Sound, data: any, samplesCount: number) => void;
    UnloadWave: (wave: audio.Wave) => void;
    UnloadSound: (sound: audio.Sound) => void;
    ExportWave: (wave: audio.Wave, fileName: string) => void;
    ExportWaveAsCode: (wave: audio.Wave, fileName: string) => void;
    PlaySound: (sound: audio.Sound) => void;
    PauseSound: (sound: audio.Sound) => void;
    ResumeSound: (sound: audio.Sound) => void;
    StopSound: (sound: audio.Sound) => void;
    IsSoundPlaying: (sound: audio.Sound) => boolean;
    SetSoundVolume: (sound: audio.Sound, volume: number) => void;
    SetSoundPitch: (sound: audio.Sound, pitch: number) => void;
    WaveFormat: (wave: audio.Wave, sampleRate: number, sampleSize: number, channels: number) => void;
    WaveCopy: (wave: audio.Wave) => audio.Wave;
    WaveCrop: (wave: audio.Wave, initSample: number, finalSample: number) => void;
    GetWaveData: (wave: audio.Wave) => number;
    LoadMusicStream: (fileName: string) => audio.MusicData;
    UnloadMusicStream: (music: audio.MusicData) => void;
    PlayMusicStream: (music: audio.MusicData) => void;
    UpdateMusicStream: (music: audio.MusicData) => void;
    StopMusicStream: (music: audio.MusicData) => void;
    PauseMusicStream: (music: audio.MusicData) => void;
    ResumeMusicStream: (music: audio.MusicData) => void;
    IsMusicPlaying: (music: audio.MusicData) => boolean;
    SetMusicVolume: (music: audio.MusicData, volume: number) => void;
    SetMusicPitch: (music: audio.MusicData, pitch: number) => void;
    SetMusicLoopCount: (music: audio.MusicData, count: number) => void;
    GetMusicTimeLength: (music: audio.MusicData) => number;
    GetMusicTimePlayed: (music: audio.MusicData) => number;
    InitAudioStream: (sampleRate: number, sampleSize: number, channels: number) => audio.AudioStream;
    UpdateAudioStream: (stream: audio.AudioStream, data: any, samplesCount: number) => void;
    CloseAudioStream: (stream: audio.AudioStream) => void;
    IsAudioBufferProcessed: (stream: audio.AudioStream) => boolean;
    PlayAudioStream: (stream: audio.AudioStream) => void;
    PauseAudioStream: (stream: audio.AudioStream) => void;
    ResumeAudioStream: (stream: audio.AudioStream) => void;
    IsAudioStreamPlaying: (stream: audio.AudioStream) => boolean;
    StopAudioStream: (stream: audio.AudioStream) => void;
    SetAudioStreamVolume: (stream: audio.AudioStream, volume: number) => void;
    SetAudioStreamPitch: (stream: audio.AudioStream, pitch: number) => void;
    Shader: typeof shaders.Shader;
    LoadText: (fileName: string) => string;
    LoadShader: (vsFileName: string, fsFileName: string) => shaders.Shader;
    LoadShaderCode: (vsCode: string, fsCode: string) => shaders.Shader;
    UnloadShader: (shader: shaders.Shader) => void;
    GetShaderDefault: () => shaders.Shader;
    GetTextureDefault: () => import("./src/types/texture").Texture2D;
    GetShaderLocation: (shader: shaders.Shader, uniformName: string) => number;
    SetShaderValue: (shader: shaders.Shader, uniformLoc: number, value: any, uniformType: number) => void;
    SetShaderValueV: (shader: shaders.Shader, uniformLoc: number, value: any, uniformType: number, count: number) => void;
    SetShaderValueMatrix: (shader: shaders.Shader, uniformLoc: number, mat: maths.Matrix) => void;
    SetShaderValueTexture: (shader: shaders.Shader, uniformLoc: number, texture: import("./src/types/texture").Texture2D) => void;
    SetMatrixProjection: (proj: maths.Matrix) => void;
    SetMatrixModelview: (view: maths.Matrix) => void;
    GetMatrixModelview: () => maths.Matrix;
    BeginShaderMode: (shader: shaders.Shader) => void;
    EndShaderMode: () => void;
    BeginBlendMode: (mode: number) => void;
    EndBlendMode: () => void;
    BeginScissorMode: (x: number, y: number, width: number, height: number) => void;
    EndScissorMode: () => void;
    InitVrSimulator: () => void;
    CloseVrSimulator: () => void;
    UpdateVrTracking: (camera: camera.Camera3D) => void;
    SetVrConfiguration: (info: import("./src/types/misc").VrDeviceInfo, distortion: shaders.Shader) => void;
    IsVrSimulatorReady: () => boolean;
    ToggleVrMode: () => void;
    BeginVrDrawing: () => void;
    EndVrDrawing: () => void;
    DrawLine3D: (startPos: maths.Vector3, endPos: maths.Vector3, color: colors.Color) => void;
    DrawCircle3D: (center: maths.Vector3, radius: number, rotationAxis: maths.Vector3, rotationAngle: number, color: colors.Color) => void;
    DrawCube: (position: maths.Vector3, width: number, height: number, length: number, color: colors.Color) => void;
    DrawCubeV: (position: maths.Vector3, size: maths.Vector3, color: colors.Color) => void;
    DrawCubeWires: (position: maths.Vector3, width: number, height: number, length: number, color: colors.Color) => void;
    DrawCubeWiresV: (position: maths.Vector3, size: maths.Vector3, color: colors.Color) => void;
    DrawCubeTexture: (texture: import("./src/types/texture").Texture2D, position: maths.Vector3, width: number, height: number, length: number, color: colors.Color) => void;
    DrawSphere: (centerPos: maths.Vector3, radius: number, color: colors.Color) => void;
    DrawSphereEx: (centerPos: maths.Vector3, radius: number, rings: number, slices: number, color: colors.Color) => void;
    DrawSphereWires: (centerPos: maths.Vector3, radius: number, rings: number, slices: number, color: colors.Color) => void;
    DrawCylinder: (position: maths.Vector3, radiusTop: number, radiusBottom: number, height: number, slices: number, color: colors.Color) => void;
    DrawCylinderWires: (position: maths.Vector3, radiusTop: number, radiusBottom: number, height: number, slices: number, color: colors.Color) => void;
    DrawPlane: (centerPos: maths.Vector3, size: maths.Vector2, color: colors.Color) => void;
    DrawRay: (ray: maths.Ray, color: colors.Color) => void;
    DrawGrid: (slices: number, spacing: number) => void;
    DrawGizmo: (position: maths.Vector3) => void;
    GetFontDefault: () => import("./src/types/texture").Font;
    LoadFont: (fileName: string) => import("./src/types/texture").Font;
    LoadFontEx: (fileName: string, fontSize: number, fontChars: number, charsCount: number) => import("./src/types/texture").Font;
    LoadFontFromImage: (image: import("./src/types/texture").Image, key: colors.Color, firstChar: number) => import("./src/types/texture").Font;
    LoadFontData: (fileName: string, fontSize: number, fontChars: number, charsCount: number, type: number) => import("./src/types/texture").CharInfo;
    GenImageFontAtlas: (chars: import("./src/types/texture").CharInfo, charsCount: number, fontSize: number, padding: number, packMethod: number) => import("./src/types/texture").Image;
    UnloadFont: (font: import("./src/types/texture").Font) => void;
    DrawFPS: (posX: number, posY: number) => void;
    DrawText: (text: string, posX: number, posY: number, fontSize: number, color: colors.Color) => void;
    DrawTextEx: (font: import("./src/types/texture").Font, text: string, position: maths.Vector2, fontSize: number, spacing: number, tint: colors.Color) => void;
    DrawTextRec: (font: import("./src/types/texture").Font, text: string, rec: maths.Rectangle, fontSize: number, spacing: number, wordWrap: boolean, tint: colors.Color) => void;
    DrawTextRecEx: (font: import("./src/types/texture").Font, text: string, rec: maths.Rectangle, fontSize: number, spacing: number, wordWrap: boolean, tint: colors.Color, selectStart: number, selectLength: number, selectText: colors.Color, selectBack: colors.Color) => void;
    MeasureText: (text: string, fontSize: number) => number;
    MeasureTextEx: (font: import("./src/types/texture").Font, text: string, fontSize: number, spacing: number) => maths.Vector2;
    GetGlyphIndex: (font: import("./src/types/texture").Font, character: number) => number;
    TextIsEqual: (text1: string, text2: string) => boolean;
    TextLength: (text: string) => number;
    TextFormat: (text: string, ...args: any) => string;
    TextSubtext: (text: string, position: number, length: number) => string;
    TextReplace: (text: string, replace: string, by: string) => string;
    TextInsert: (text: string, insert: string, position: number) => string;
    TextJoin: (textList: string, count: number, delimiter: string) => string;
    TextSplit: (text: string, delimiter: string, count: number) => string;
    TextAppend: (text: string, append: string, position: number) => void;
    TextFindIndex: (text: string, find: string) => number;
    TextToUpper: (text: string) => string;
    TextToLower: (text: string) => string;
    TextToPascal: (text: string) => string;
    TextToInteger: (text: string) => number;
    LoadImage: (fileName: string) => import("./src/types/texture").Image;
    LoadImageEx: (pixels: colors.Color, width: number, height: number) => import("./src/types/texture").Image;
    LoadImagePro: (data: any, width: number, height: number, format: number) => import("./src/types/texture").Image;
    LoadImageRaw: (fileName: string, width: number, height: number, format: number, headerSize: number) => import("./src/types/texture").Image;
    ExportImage: (image: import("./src/types/texture").Image, fileName: string) => void;
    ExportImageAsCode: (image: import("./src/types/texture").Image, fileName: string) => void;
    LoadTexture: (fileName: string) => import("./src/types/texture").Texture2D;
    LoadTextureFromImage: (image: import("./src/types/texture").Image) => import("./src/types/texture").Texture2D;
    LoadTextureCubemap: (image: import("./src/types/texture").Image, layoutType: number) => import("./src/types/texture").Texture2D;
    LoadRenderTexture: (width: number, height: number) => import("./src/types/texture").RenderTexture2D;
    UnloadImage: (image: import("./src/types/texture").Image) => void;
    UnloadTexture: (texture: import("./src/types/texture").Texture2D) => void;
    UnloadRenderTexture: (target: import("./src/types/texture").RenderTexture2D) => void;
    GetImageData: (image: import("./src/types/texture").Image) => colors.Color;
    GetImageDataNormalized: (image: import("./src/types/texture").Image) => maths.Vector4;
    GetPixelDataSize: (width: number, height: number, format: number) => number;
    GetTextureData: (texture: import("./src/types/texture").Texture2D) => import("./src/types/texture").Image;
    GetScreenData: () => import("./src/types/texture").Image;
    UpdateTexture: (texture: import("./src/types/texture").Texture2D, pixels: any) => void;
    ImageCopy: (image: import("./src/types/texture").Image) => import("./src/types/texture").Image;
    ImageToPOT: (image: import("./src/types/texture").Image, fillColor: colors.Color) => void;
    ImageFormat: (image: import("./src/types/texture").Image, newFormat: number) => void;
    ImageAlphaMask: (image: import("./src/types/texture").Image, alphaMask: import("./src/types/texture").Image) => void;
    ImageAlphaClear: (image: import("./src/types/texture").Image, color: colors.Color, threshold: number) => void;
    ImageAlphaCrop: (image: import("./src/types/texture").Image, threshold: number) => void;
    ImageAlphaPremultiply: (image: import("./src/types/texture").Image) => void;
    ImageCrop: (image: import("./src/types/texture").Image, crop: maths.Rectangle) => void;
    ImageResize: (image: import("./src/types/texture").Image, newWidth: number, newHeight: number) => void;
    ImageResizeNN: (image: import("./src/types/texture").Image, newHeight: number, newWidth: number) => void;
    ImageResizeCanvas: (image: import("./src/types/texture").Image, newWidth: number, newHeight: number, offsetX: number, offsetY: number, color: colors.Color) => void;
    ImageMipmaps: (image: import("./src/types/texture").Image) => void;
    ImageDither: (image: import("./src/types/texture").Image, rBpp: number, gBpp: number, bBpp: number, aBpp: number) => void;
    ImageExtractPalette: (image: import("./src/types/texture").Image, maxPaletteSize: number, extractCount: number) => colors.Color;
    ImageText: (text: string, fontSize: number, color: colors.Color) => import("./src/types/texture").Image;
    ImageTextEx: (font: import("./src/types/texture").Font, text: string, fontSize: number, spacing: number, tint: colors.Color) => import("./src/types/texture").Image;
    ImageDraw: (dst: import("./src/types/texture").Image, src: import("./src/types/texture").Image, srcRec: maths.Rectangle, dstRec: maths.Rectangle) => void;
    ImageDrawRectangle: (dst: import("./src/types/texture").Image, rec: maths.Rectangle, color: colors.Color) => void;
    ImageDrawRectangleLines: (dst: import("./src/types/texture").Image, rec: maths.Rectangle, thick: number, color: colors.Color) => void;
    ImageDrawText: (dst: import("./src/types/texture").Image, position: maths.Vector2, text: string, fontSize: number, color: colors.Color) => void;
    ImageDrawTextEx: (dst: import("./src/types/texture").Image, position: maths.Vector2, font: import("./src/types/texture").Font, text: string, fontSize: number, spacing: number, color: colors.Color) => void;
    ImageFlipVertical: (image: import("./src/types/texture").Image) => void;
    ImageFlipHorizontal: (image: import("./src/types/texture").Image) => void;
    ImageRotateCW: (image: import("./src/types/texture").Image) => void;
    ImageRotateCCW: (image: import("./src/types/texture").Image) => void;
    ImageColorTint: (image: import("./src/types/texture").Image, color: colors.Color) => void;
    ImageColorInvert: (image: import("./src/types/texture").Image) => void;
    ImageColorGrayscale: (image: import("./src/types/texture").Image) => void;
    ImageColorContrast: (image: import("./src/types/texture").Image, contrast: number) => void;
    ImageColorBrightness: (image: import("./src/types/texture").Image, brightness: number) => void;
    ImageColorReplace: (image: import("./src/types/texture").Image, color: colors.Color, replace: colors.Color) => void;
    GenImageColor: (width: number, height: number, color: colors.Color) => import("./src/types/texture").Image;
    GenImageGradientV: (width: number, height: number, top: colors.Color, bottom: colors.Color) => import("./src/types/texture").Image;
    GenImageGradientH: (width: number, height: number, left: colors.Color, right: colors.Color) => import("./src/types/texture").Image;
    GenImageGradientRadial: (width: number, height: number, density: number, inner: colors.Color, outer: colors.Color) => import("./src/types/texture").Image;
    GenImageChecked: (width: number, height: number, checksX: number, checksY: number, col1: colors.Color, col2: colors.Color) => import("./src/types/texture").Image;
    GenImageWhiteNoise: (width: number, height: number, factor: number) => import("./src/types/texture").Image;
    GenImagePerlinNoise: (width: number, height: number, offsetX: number, offsetY: number, scale: number) => import("./src/types/texture").Image;
    GenImageCellular: (width: number, height: number, tileSize: number) => import("./src/types/texture").Image;
    GenTextureMipmaps: (texture: import("./src/types/texture").Texture2D) => void;
    SetTextureFilter: (texture: import("./src/types/texture").Texture2D, filterMode: number) => void;
    SetTextureWrap: (texture: import("./src/types/texture").Texture2D, wrapMode: number) => void;
    DrawTexture: (texture: import("./src/types/texture").Texture2D, posX: number, posY: number, tint: colors.Color) => void;
    DrawTextureV: (texture: import("./src/types/texture").Texture2D, position: maths.Vector2, tint: colors.Color) => void;
    DrawTextureEx: (texture: import("./src/types/texture").Texture2D, position: maths.Vector2, rotation: number, scale: number, tint: colors.Color) => void;
    DrawTextureRec: (texture: import("./src/types/texture").Texture2D, sourceRec: maths.Rectangle, position: maths.Vector2, tint: colors.Color) => void;
    DrawTextureQuad: (texture: import("./src/types/texture").Texture2D, tiling: maths.Vector2, offset: maths.Vector2, quad: maths.Rectangle, tint: colors.Color) => void;
    DrawTexturePro: (texture: import("./src/types/texture").Texture2D, sourceRec: maths.Rectangle, destRec: maths.Rectangle, origin: maths.Vector2, rotation: number, tint: colors.Color) => void;
    DrawTextureNPatch: (texture: import("./src/types/texture").Texture2D, nPatchInfo: maths.NPatchInfo, destRec: maths.Rectangle, origin: maths.Vector2, rotation: number, tint: colors.Color) => void;
    DrawPixel: (posX: number, posY: number, color: colors.Color) => void;
    DrawPixelV: (position: maths.Vector2, color: colors.Color) => void;
    DrawLine: (startPosX: number, startPosY: number, endPosX: number, endPosY: number, color: colors.Color) => void;
    DrawLineV: (startPos: maths.Vector2, endPos: maths.Vector2, color: colors.Color) => void;
    DrawLineEx: (startPos: maths.Vector2, endPos: maths.Vector2, thick: number, color: colors.Color) => void;
    DrawLineBezier: (startPos: maths.Vector2, endPos: maths.Vector2, thick: number, color: colors.Color) => void;
    DrawLineStrip: (points: maths.Vector2, numPoints: number, color: colors.Color) => void;
    DrawCircle: (centerX: number, centerY: number, radius: number, color: colors.Color) => void;
    DrawCircleSector: (center: maths.Vector2, radius: number, startAngle: number, endAngle: number, segments: number, color: colors.Color) => void;
    DrawCircleSectorLines: (center: maths.Vector2, radius: number, startAngle: number, endAngle: number, segments: number, color: colors.Color) => void;
    DrawCircleGradient: (centerX: number, centerY: number, radius: number, color1: colors.Color, color2: colors.Color) => void;
    DrawCircleV: (center: maths.Vector2, radius: number, color: colors.Color) => void;
    DrawCircleLines: (centerX: number, centerY: number, radius: number, color: colors.Color) => void;
    DrawRing: (center: maths.Vector2, innerRadius: number, outerRadius: number, startAngle: number, endAngle: number, segments: number, color: colors.Color) => void;
    DrawRingLines: (center: maths.Vector2, innerRadius: number, outerRadius: number, startAngle: number, endAngle: number, segments: number, color: colors.Color) => void;
    DrawRectangle: (posX: number, posY: number, width: number, height: number, color: colors.Color) => void;
    DrawRectangleV: (position: maths.Vector2, size: maths.Vector2, color: colors.Color) => void;
    DrawRectangleRec: (rec: maths.Rectangle, color: colors.Color) => void;
    DrawRectanglePro: (rec: maths.Rectangle, origin: maths.Vector2, rotation: number, color: colors.Color) => void;
    DrawRectangleGradientV: (posX: number, posY: number, width: number, height: number, color1: colors.Color, color2: colors.Color) => void;
    DrawRectangleGradientH: (posX: number, posY: number, width: number, height: number, color1: colors.Color, color2: colors.Color) => void;
    DrawRectangleGradientEx: (rec: maths.Rectangle, col1: colors.Color, col2: colors.Color, col3: colors.Color, col4: colors.Color) => void;
    DrawRectangleLines: (posX: number, posY: number, width: number, height: number, color: colors.Color) => void;
    DrawRectangleLinesEx: (rec: maths.Rectangle, lineThick: number, color: colors.Color) => void;
    DrawRectangleRounded: (rec: maths.Rectangle, roundness: number, segments: number, color: colors.Color) => void;
    DrawRectangleRoundedLines: (rec: maths.Rectangle, roundness: number, segments: number, lineThick: number, color: colors.Color) => void;
    DrawTriangle: (v1: maths.Vector2, v2: maths.Vector2, v3: maths.Vector2, color: colors.Color) => void;
    DrawTriangleLines: (v1: maths.Vector2, v2: maths.Vector2, v3: maths.Vector2, color: colors.Color) => void;
    DrawTriangleFan: (points: maths.Vector2, numPoints: number, color: colors.Color) => void;
    DrawPoly: (center: maths.Vector2, sides: number, radius: number, rotation: number, color: colors.Color) => void;
    SetShapesTexture: (texture: import("./src/types/texture").Texture2D, source: maths.Rectangle) => void;
    CheckCollisionRecs: (rec1: maths.Rectangle, rec2: maths.Rectangle) => boolean;
    CheckCollisionCircles: (center1: maths.Vector2, radius1: number, center2: maths.Vector2, radius2: number) => boolean;
    CheckCollisionCircleRec: (center: maths.Vector2, radius: number, rec: maths.Rectangle) => boolean;
    GetCollisionRec: (rec1: maths.Rectangle, rec2: maths.Rectangle) => maths.Rectangle;
    CheckCollisionPointRec: (point: maths.Vector2, rec: maths.Rectangle) => boolean;
    CheckCollisionPointCircle: (point: maths.Vector2, center: maths.Vector2, radius: number) => boolean;
    CheckCollisionPointTriangle: (point: maths.Vector2, p1: maths.Vector2, p2: maths.Vector2, p3: maths.Vector2) => boolean;
    InitWindow: (width: number, height: number, title: string) => void;
    WindowShouldClose: () => boolean;
    CloseWindow: () => void;
    IsWindowReady: () => boolean;
    IsWindowMinimized: () => boolean;
    IsWindowResized: () => boolean;
    IsWindowHidden: () => boolean;
    ToggleFullscreen: () => void;
    UnhideWindow: () => void;
    HideWindow: () => void;
    SetWindowIcon: (image: import("./src/types/texture").Image) => void;
    SetWindowTitle: (title: string) => void;
    SetWindowPosition: (x: number, y: number) => void;
    SetWindowMonitor: (monitor: number) => void;
    SetWindowMinSize: (width: number, height: number) => void;
    SetWindowSize: (width: number, height: number) => void;
    GetWindowHandle: () => void;
    GetScreenWidth: () => number;
    GetScreenHeight: () => number;
    GetMonitorCount: () => number;
    GetMonitorWidth: (monitor: number) => number;
    GetMonitorHeight: (monitor: number) => number;
    GetMonitorPhysicalWidth: (monitor: number) => number;
    GetMonitorPhysicalHeight: (monitor: number) => number;
    GetMonitorName: (monitor: number) => string;
    GetClipboardText: () => string;
    SetClipboardText: (text: string) => void;
    ShowCursor: () => void;
    HideCursor: () => void;
    IsCursorHidden: () => boolean;
    EnableCursor: () => void;
    DisableCursor: () => void;
    ClearBackground: (color: colors.Color) => void;
    BeginDrawing: () => void;
    EndDrawing: () => void;
    BeginMode2D: (camera: camera.Camera2D) => void;
    EndMode2D: () => void;
    BeginMode3D: (camera: camera.Camera3D) => void;
    EndMode3D: () => void;
    BeginTextureMode: (target: import("./src/types/texture").RenderTexture2D) => void;
    EndTextureMode: () => void;
    GetMouseRay: (mousePosition: maths.Vector2, camera: camera.Camera3D) => maths.Ray;
    GetWorldToScreen: (position: maths.Vector3, camera: camera.Camera3D) => maths.Vector2;
    GetCameraMatrix: (camera: camera.Camera3D) => maths.Matrix;
    SetTargetFPS: (fps: number) => void;
    GetFPS: () => number;
    GetFrameTime: () => number;
    GetTime: () => number;
    ColorToInt: (color: colors.Color) => number;
    ColorNormalize: (color: colors.Color) => maths.Vector4;
    ColorToHSV: (color: colors.Color) => maths.Vector3;
    ColorFromHSV: (hsv: maths.Vector3) => colors.Color;
    GetColor: (hexValue: number) => colors.Color;
    Fade: (color: colors.Color, alpha: number) => colors.Color;
    SetConfigFlags: (flags: number) => void;
    SetTraceLogLevel: (logType: number) => void;
    SetTraceLogExit: (logType: number) => void;
    SetTraceLogCallback: (callback: import("./src/types/misc").TraceLogCallback) => void;
    TraceLog: (logType: number, text: string, ...args: any) => void;
    TakeScreenshot: (fileName: string) => void;
    GetRandomValue: (min: number, max: number) => number;
    FileExists: (fileName: string) => boolean;
    IsFileExtension: (fileName: string, ext: string) => boolean;
    GetExtension: (fileName: string) => string;
    GetFileName: (filePath: string) => string;
    GetFileNameWithoutExt: (filePath: string) => string;
    GetDirectoryPath: (fileName: string) => string;
    GetWorkingDirectory: () => string;
    GetDirectoryFiles: (dirPath: string, count: number) => number;
    ClearDirectoryFiles: () => void;
    ChangeDirectory: (dir: string) => boolean;
    IsFileDropped: () => boolean;
    GetDroppedFiles: (count: number) => number;
    ClearDroppedFiles: () => void;
    GetFileModTime: (fileName: string) => number;
    StorageSaveValue: (position: number, value: number) => void;
    StorageLoadValue: (position: number) => number;
    OpenURL: (url: string) => void;
    IsKeyPressed: (key: number) => boolean;
    IsKeyDown: (key: number) => boolean;
    IsKeyReleased: (key: number) => boolean;
    IsKeyUp: (key: number) => boolean;
    GetKeyPressed: () => number;
    SetExitKey: (key: number) => void;
    IsGamepadAvailable: (gamepad: number) => boolean;
    IsGamepadName: (gamepad: number, name: string) => boolean;
    GetGamepadName: (gamepad: number) => string;
    IsGamepadButtonPressed: (gamepad: number, button: number) => boolean;
    IsGamepadButtonDown: (gamepad: number, button: number) => boolean;
    IsGamepadButtonReleased: (gamepad: number, button: number) => boolean;
    IsGamepadButtonUp: (gamepad: number, button: number) => boolean;
    GetGamepadButtonPressed: () => number;
    GetGamepadAxisCount: (gamepad: number) => number;
    GetGamepadAxisMovement: (gamepad: number, axis: number) => number;
    IsMouseButtonPressed: (button: number) => boolean;
    IsMouseButtonDown: (button: number) => boolean;
    IsMouseButtonReleased: (button: number) => boolean;
    IsMouseButtonUp: (button: number) => boolean;
    GetMouseX: () => number;
    GetMouseY: () => number;
    GetMousePosition: () => maths.Vector2;
    SetMousePosition: (x: number, y: number) => void;
    SetMouseOffset: (offsetX: number, offsetY: number) => void;
    SetMouseScale: (scaleX: number, scaleY: number) => void;
    GetMouseWheelMove: () => number;
    GetTouchX: () => number;
    GetTouchY: () => number;
    GetTouchPosition: (index: number) => maths.Vector2;
    SetGesturesEnabled: (gestureFlags: number) => void;
    IsGestureDetected: (gesture: number) => boolean;
    GetGestureDetected: () => number;
    GetTouchPointsCount: () => number;
    GetGestureHoldDuration: () => number;
    GetGestureDragVector: () => maths.Vector2;
    GetGestureDragAngle: () => number;
    GetGesturePinchVector: () => maths.Vector2;
    GetGesturePinchAngle: () => number;
    SetCameraMode: (camera: camera.Camera3D, mode: number) => void;
    UpdateCamera: (camera: camera.Camera3D) => void;
    SetCameraPanControl: (panKey: number) => void;
    SetCameraAltControl: (altKey: number) => void;
    SetCameraSmoothZoomControl: (szKey: number) => void;
    SetCameraMoveControls: (frontKey: number, backKey: number, rightKey: number, leftKey: number, upKey: number, downKey: number) => void;
    /**
     * node-raylib
     *
     * https://github.com/robloach/node-raylib
     */
    Vector2: typeof maths.Vector2;
    Vector3: typeof maths.Vector3;
    Vector4: typeof maths.Vector4;
    Rectangle: typeof maths.Rectangle;
    NPatchInfo: typeof maths.NPatchInfo;
    Ray: typeof maths.Ray;
    RayHitInfo: typeof maths.RayHitInfo;
    Camera3D: typeof camera.Camera3D;
    Camera2D: typeof camera.Camera2D;
    /**
     * node-raylib
     *
     * https://github.com/robloach/node-raylib
     */
    Color: typeof colors.Color;
    LIGHTGRAY: colors.Color;
    GRAY: colors.Color;
    DARKGRAY: colors.Color;
    YELLOW: colors.Color;
    GOLD: colors.Color;
    ORANGE: colors.Color;
    PINK: colors.Color;
    RED: colors.Color;
    MAROON: colors.Color;
    GREEN: colors.Color;
    LIME: colors.Color;
    DARKGREEN: colors.Color;
    SKYBLUE: colors.Color;
    BLUE: colors.Color;
    DARKBLUE: colors.Color;
    PURPLE: colors.Color;
    VIOLET: colors.Color;
    DARKPURPLE: colors.Color;
    BEIGE: colors.Color;
    BROWN: colors.Color;
    DARKBROWN: colors.Color;
    WHITE: colors.Color;
    BLACK: colors.Color;
    BLANK: colors.Color;
    MAGENTA: colors.Color;
    RAYWHITE: colors.Color;
    PI: number;
    MAX_TOUCH_POINTS: number;
    MAX_SHADER_LOCATIONS: number;
    MAX_MATERIAL_MAPS: number;
    DEG2RAD: number;
    RAD2DEG: number;
};
export default raylib;
export { r };

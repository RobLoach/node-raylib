/**
 * node-raylib
 *
 * https://github.com/robloach/node-raylib
 */
import r from "./src/bindings/raylib";
import * as colors from "./src/colors";
declare const raylib: {
    InitAudioDevice: () => void;
    CloseAudioDevice: () => void;
    IsAudioDeviceReady: () => boolean;
    SetMasterVolume: (volume: number) => void;
    LoadWave: (fileName: string) => any;
    LoadWaveEx: (channels: number) => any;
    LoadSound: (fileName: string) => any;
    LoadSoundFromWave: (wave: any) => any;
    UpdateSound: (samplesCount: number) => void;
    UnloadWave: (wave: any) => void;
    UnloadSound: (sound: any) => void;
    ExportWave: (fileName: string) => void;
    ExportWaveAsCode: (fileName: string) => void;
    PlaySound: (sound: any) => void;
    PauseSound: (sound: any) => void;
    ResumeSound: (sound: any) => void;
    StopSound: (sound: any) => void;
    IsSoundPlaying: (sound: any) => boolean;
    SetSoundVolume: (volume: number) => void;
    SetSoundPitch: (pitch: number) => void;
    WaveFormat: (channels: number) => void;
    WaveCopy: (wave: any) => any;
    WaveCrop: (finalSample: number) => void;
    GetWaveData: (wave: any) => any;
    LoadMusicStream: (fileName: string) => any;
    UnloadMusicStream: (music: any) => void;
    PlayMusicStream: (music: any) => void;
    UpdateMusicStream: (music: any) => void;
    StopMusicStream: (music: any) => void;
    PauseMusicStream: (music: any) => void;
    ResumeMusicStream: (music: any) => void;
    IsMusicPlaying: (music: any) => boolean;
    SetMusicVolume: (volume: number) => void;
    SetMusicPitch: (pitch: number) => void;
    SetMusicLoopCount: (count: number) => void;
    GetMusicTimeLength: (music: any) => number;
    GetMusicTimePlayed: (music: any) => number;
    InitAudioStream: (channels: number) => any;
    UpdateAudioStream: (samplesCount: number) => void;
    CloseAudioStream: (stream: any) => void;
    IsAudioBufferProcessed: (stream: any) => boolean;
    PlayAudioStream: (stream: any) => void;
    PauseAudioStream: (stream: any) => void;
    ResumeAudioStream: (stream: any) => void;
    IsAudioStreamPlaying: (stream: any) => boolean;
    StopAudioStream: (stream: any) => void;
    SetAudioStreamVolume: (volume: number) => void;
    SetAudioStreamPitch: (pitch: number) => void;
    LoadText: (fileName: string) => string;
    LoadShader: (fsFileName: string) => any;
    LoadShaderCode: (fsCode: string) => any;
    UnloadShader: (shader: any) => void;
    GetShaderDefault: () => any;
    GetTextureDefault: () => any;
    GetShaderLocation: (uniformName: string) => number;
    SetShaderValue: (uniformType: number) => void;
    SetShaderValueV: (count: number) => void;
    SetShaderValueMatrix: (mat: any) => void;
    SetShaderValueTexture: (texture: any) => void;
    SetMatrixProjection: (proj: any) => void;
    SetMatrixModelview: (view: any) => void;
    GetMatrixModelview: any;
    BeginShaderMode: (shader: any) => void;
    EndShaderMode: () => void;
    BeginBlendMode: (mode: number) => void;
    EndBlendMode: () => void;
    BeginScissorMode: (height: number) => void;
    EndScissorMode: () => void;
    InitVrSimulator: () => void;
    CloseVrSimulator: () => void;
    UpdateVrTracking: (camera: any) => void;
    SetVrConfiguration: (distortion: any) => void;
    IsVrSimulatorReady: () => boolean;
    ToggleVrMode: () => void;
    BeginVrDrawing: () => void;
    EndVrDrawing: () => void;
    DrawLine3D: (color: any) => void;
    DrawCircle3D: (color: any) => void;
    DrawCube: (color: any) => void;
    DrawCubeV: (color: any) => void;
    DrawCubeWires: (color: any) => void;
    DrawCubeWiresV: (color: any) => void;
    DrawCubeTexture: (color: any) => void;
    DrawSphere: (color: any) => void;
    DrawSphereEx: (color: any) => void;
    DrawSphereWires: (color: any) => void;
    DrawCylinder: (color: any) => void;
    DrawCylinderWires: (color: any) => void;
    DrawPlane: (color: any) => void;
    DrawRay: (color: any) => void;
    DrawGrid: (spacing: number) => void;
    DrawGizmo: (position: any) => void;
    LoadModel: (fileName: string) => any;
    LoadModelFromMesh: (mesh: any) => any;
    UnloadModel: (model: any) => void;
    LoadMeshes: (meshCount: number) => any;
    ExportMesh: (fileName: string) => void;
    UnloadMesh: (mesh: any) => void;
    LoadMaterials: (materialCount: number) => any;
    LoadMaterialDefault: () => any;
    UnloadMaterial: (material: any) => void;
    SetMaterialTexture: (texture: any) => void;
    SetModelMeshMaterial: (materialId: number) => void;
    LoadModelAnimations: (animsCount: number) => any;
    UpdateModelAnimation: (frame: number) => void;
    UnloadModelAnimation: (anim: any) => void;
    IsModelAnimationValid: (anim: any) => boolean;
    GenMeshPoly: (radius: number) => any;
    GenMeshPlane: (resZ: number) => any;
    GenMeshCube: (length: number) => any;
    GenMeshSphere: (slices: number) => any;
    GenMeshHemiSphere: (slices: number) => any;
    GenMeshCylinder: (slices: number) => any;
    GenMeshTorus: (sides: number) => any;
    GenMeshKnot: (sides: number) => any;
    GenMeshHeightmap: (size: any) => any;
    GenMeshCubicmap: (cubeSize: any) => any;
    MeshBoundingBox: (mesh: any) => any;
    MeshTangents: (mesh: any) => void;
    MeshBinormals: (mesh: any) => void;
    DrawModel: (tint: any) => void;
    DrawModelEx: (tint: any) => void;
    DrawModelWires: (tint: any) => void;
    DrawModelWiresEx: (tint: any) => void;
    DrawBoundingBox: (color: any) => void;
    DrawBillboard: (tint: any) => void;
    DrawBillboardRec: (tint: any) => void;
    CheckCollisionSpheres: (radiusB: number) => boolean;
    CheckCollisionBoxes: (box2: any) => boolean;
    CheckCollisionBoxSphere: (radiusSphere: number) => boolean;
    CheckCollisionRaySphere: (sphereRadius: number) => boolean;
    CheckCollisionRaySphereEx: (collisionPoint: any) => boolean;
    CheckCollisionRayBox: (box: any) => boolean;
    GetCollisionRayModel: (model: any) => any;
    GetCollisionRayTriangle: (p3: any) => any;
    GetCollisionRayGround: (groundHeight: number) => any;
    GetFontDefault: () => any;
    LoadFont: (fileName: string) => any;
    LoadFontEx: (charsCount: number) => any;
    LoadFontFromImage: (firstChar: number) => any;
    LoadFontData: (type: number) => any;
    GenImageFontAtlas: (packMethod: number) => any;
    UnloadFont: (font: any) => void;
    DrawFPS: (posY: number) => void;
    DrawText: (color: any) => void;
    DrawTextEx: (tint: any) => void;
    DrawTextRec: (tint: any) => void;
    DrawTextRecEx: (selectBack: any) => void;
    MeasureText: (fontSize: number) => number;
    MeasureTextEx: (spacing: number) => any;
    GetGlyphIndex: (character: number) => number;
    TextIsEqual: (text2: string) => boolean;
    TextLength: (text: string) => number;
    TextFormat: (...: any) => string;
    TextSubtext: (length: number) => string;
    TextReplace: (by: string) => string;
    TextInsert: (position: number) => string;
    TextJoin: (delimiter: string) => string;
    TextSplit: (count: number) => any;
    char: any;
    TextAppend: (position: number) => void;
    TextFindIndex: (find: string) => number;
    TextToUpper: (text: string) => string;
    TextToLower: (text: string) => string;
    TextToPascal: (text: string) => string;
    TextToInteger: (text: string) => number;
    LoadImage: (fileName: string) => any;
    LoadImageEx: (height: number) => any;
    LoadImagePro: (format: number) => any;
    LoadImageRaw: (headerSize: number) => any;
    ExportImage: (fileName: string) => void;
    ExportImageAsCode: (fileName: string) => void;
    LoadTexture: (fileName: string) => any;
    LoadTextureFromImage: (image: any) => any;
    LoadTextureCubemap: (layoutType: number) => any;
    LoadRenderTexture: (height: number) => any;
    UnloadImage: (image: any) => void;
    UnloadTexture: (texture: any) => void;
    UnloadRenderTexture: (target: any) => void;
    GetImageData: (image: any) => any;
    GetImageDataNormalized: (image: any) => any;
    GetPixelDataSize: (format: number) => number;
    GetTextureData: (texture: any) => any;
    GetScreenData: () => any;
    UpdateTexture: (pixels: any, : any) => void;
    ImageCopy: (image: any) => any;
    ImageToPOT: (fillColor: any) => void;
    ImageFormat: (newFormat: number) => void;
    ImageAlphaMask: (alphaMask: any) => void;
    ImageAlphaClear: (threshold: number) => void;
    ImageAlphaCrop: (threshold: number) => void;
    ImageAlphaPremultiply: (image: any) => void;
    ImageCrop: (crop: any) => void;
    ImageResize: (newHeight: number) => void;
    ImageResizeNN: (newHeight: any, newWidth: any, int: any) => void;
    ImageResizeCanvas: (color: any) => void;
    ImageMipmaps: (image: any) => void;
    ImageDither: (aBpp: number) => void;
    ImageExtractPalette: (extractCount: number) => any;
    ImageText: (color: any) => any;
    ImageTextEx: (tint: any) => any;
    ImageDraw: (dstRec: any) => void;
    ImageDrawRectangle: (color: any) => void;
    ImageDrawRectangleLines: (color: any) => void;
    ImageDrawText: (color: any) => void;
    ImageDrawTextEx: (color: any) => void;
    ImageFlipVertical: (image: any) => void;
    ImageFlipHorizontal: (image: any) => void;
    ImageRotateCW: (image: any) => void;
    ImageRotateCCW: (image: any) => void;
    ImageColorTint: (color: any) => void;
    ImageColorInvert: (image: any) => void;
    ImageColorGrayscale: (image: any) => void;
    ImageColorContrast: (contrast: number) => void;
    ImageColorBrightness: (brightness: number) => void;
    ImageColorReplace: (replace: any) => void;
    GenImageColor: (color: any) => any;
    GenImageGradientV: (bottom: any) => any;
    GenImageGradientH: (right: any) => any;
    GenImageGradientRadial: (outer: any) => any;
    GenImageChecked: (col2: any) => any;
    GenImageWhiteNoise: (factor: number) => any;
    GenImagePerlinNoise: (scale: number) => any;
    GenImageCellular: (tileSize: number) => any;
    GenTextureMipmaps: (texture: any) => void;
    SetTextureFilter: (filterMode: number) => void;
    SetTextureWrap: (wrapMode: number) => void;
    DrawTexture: (tint: any) => void;
    DrawTextureV: (tint: any) => void;
    DrawTextureEx: (tint: any) => void;
    DrawTextureRec: (tint: any) => void;
    DrawTextureQuad: (tint: any) => void;
    DrawTexturePro: (tint: any) => void;
    DrawTextureNPatch: (tint: any) => void;
    DrawPixel: (color: any) => void;
    DrawPixelV: (color: any) => void;
    DrawLine: (color: any) => void;
    DrawLineV: (color: any) => void;
    DrawLineEx: (color: any) => void;
    DrawLineBezier: (color: any) => void;
    DrawLineStrip: (color: any) => void;
    DrawCircle: (color: any) => void;
    DrawCircleSector: (color: any) => void;
    DrawCircleSectorLines: (color: any) => void;
    DrawCircleGradient: (color2: any) => void;
    DrawCircleV: (color: any) => void;
    DrawCircleLines: (color: any) => void;
    DrawRing: (color: any) => void;
    DrawRingLines: (color: any) => void;
    DrawRectangle: (color: any) => void;
    DrawRectangleV: (color: any) => void;
    DrawRectangleRec: (color: any) => void;
    DrawRectanglePro: (color: any) => void;
    DrawRectangleGradientV: (color2: any) => void;
    DrawRectangleGradientH: (color2: any) => void;
    DrawRectangleGradientEx: (col4: any) => void;
    DrawRectangleLines: (color: any) => void;
    DrawRectangleLinesEx: (color: any) => void;
    DrawRectangleRounded: (color: any) => void;
    DrawRectangleRoundedLines: (color: any) => void;
    DrawTriangle: (color: any) => void;
    DrawTriangleLines: (color: any) => void;
    DrawTriangleFan: (color: any) => void;
    DrawPoly: (color: any) => void;
    SetShapesTexture: (source: any) => void;
    CheckCollisionRecs: (rec2: any) => boolean;
    CheckCollisionCircles: (radius2: number) => boolean;
    CheckCollisionCircleRec: (rec: any) => boolean;
    GetCollisionRec: (rec2: any) => any;
    CheckCollisionPointRec: (rec: any) => boolean;
    CheckCollisionPointCircle: (radius: number) => boolean;
    CheckCollisionPointTriangle: (p3: any) => boolean;
    InitWindow: (width: number, height: number, title: string) => void;
    WindowShouldClose: () => boolean;
    SetTargetFPS: (fps: number) => void;
    BeginDrawing: () => void;
    EndDrawing: () => void;
    ClearBackground: (color: colors.Color) => void;
    Color: typeof colors.Color;
    LIGHTGRAY: colors.Color;
    GRAY: colors.Color;
    DARKGRAY: colors.Color;
    YELLOW: colors.Color;
    GOLD: colors.Color;
    ORANGE: colors.Color;
    PINK: colors.Color;
    RED: colors.Color;
    MAROON: colors.Color;
    GREEN: colors.Color;
    LIME: colors.Color;
    DARKGREEN: colors.Color;
    SKYBLUE: colors.Color;
    BLUE: colors.Color;
    DARKBLUE: colors.Color;
    PURPLE: colors.Color;
    VIOLET: colors.Color;
    DARKPURPLE: colors.Color;
    BEIGE: colors.Color;
    BROWN: colors.Color;
    DARKBROWN: colors.Color;
    WHITE: colors.Color;
    BLACK: colors.Color;
    BLANK: colors.Color;
    MAGENTA: colors.Color;
    RAYWHITE: colors.Color;
    PI: number;
    MAX_TOUCH_POINTS: number;
    MAX_SHADER_LOCATIONS: number;
    MAX_MATERIAL_MAPS: number;
    DEG2RAD: number;
    RAD2DEG: number;
};
export default raylib;
export { r };

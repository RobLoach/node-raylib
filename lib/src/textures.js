"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var raylib_1 = require("./bindings/raylib");
exports.LoadImage = raylib_1.default.LoadImage; //Load image from file into CPU memory (RAM) 
exports.LoadImageEx = raylib_1.default.LoadImageEx; //Load image from Color array data (RGBA - 32bit) 
exports.LoadImagePro = raylib_1.default.LoadImagePro; //Load image from raw data with parameters 
exports.LoadImageRaw = raylib_1.default.LoadImageRaw; //Load image from RAW file data 
exports.ExportImage = raylib_1.default.ExportImage; //Export image data to file 
exports.ExportImageAsCode = raylib_1.default.ExportImageAsCode; //Export image as code file defining an array of bytes 
exports.LoadTexture = raylib_1.default.LoadTexture; //Load texture from file into GPU memory (VRAM) 
exports.LoadTextureFromImage = raylib_1.default.LoadTextureFromImage; //Load texture from image data 
exports.LoadTextureCubemap = raylib_1.default.LoadTextureCubemap; //Load cubemap from image, multiple image cubemap layouts supported 
exports.LoadRenderTexture = raylib_1.default.LoadRenderTexture; //Load texture for rendering (framebuffer) 
exports.UnloadImage = raylib_1.default.UnloadImage; //Unload image from CPU memory (RAM) 
exports.UnloadTexture = raylib_1.default.UnloadTexture; //Unload texture from GPU memory (VRAM) 
exports.UnloadRenderTexture = raylib_1.default.UnloadRenderTexture; //Unload render texture from GPU memory (VRAM) 
exports.GetImageData = raylib_1.default.GetImageData; //Get pixel data from image as a Color struct array 
exports.GetImageDataNormalized = raylib_1.default.GetImageDataNormalized; //Get pixel data from image as Vector4 array (float normalized) 
exports.GetPixelDataSize = raylib_1.default.GetPixelDataSize; //Get pixel data size in bytes (image or texture) 
exports.GetTextureData = raylib_1.default.GetTextureData; //Get pixel data from GPU texture and return an Image 
exports.GetScreenData = raylib_1.default.GetScreenData; //Get pixel data from screen buffer and return an Image (screenshot) 
exports.UpdateTexture = raylib_1.default.UpdateTexture; //Update GPU texture with new data 
exports.ImageCopy = raylib_1.default.ImageCopy; //Create an image duplicate (useful for transformations) 
exports.ImageToPOT = raylib_1.default.ImageToPOT; //Convert image to POT (power-of-two) 
exports.ImageFormat = raylib_1.default.ImageFormat; //Convert image data to desired format 
exports.ImageAlphaMask = raylib_1.default.ImageAlphaMask; //Apply alpha mask to image 
exports.ImageAlphaClear = raylib_1.default.ImageAlphaClear; //Clear alpha channel to desired color 
exports.ImageAlphaCrop = raylib_1.default.ImageAlphaCrop; //Crop image depending on alpha value 
exports.ImageAlphaPremultiply = raylib_1.default.ImageAlphaPremultiply; //Premultiply alpha channel 
exports.ImageCrop = raylib_1.default.ImageCrop; //Crop an image to a defined rectangle 
exports.ImageResize = raylib_1.default.ImageResize; //Resize image (Bicubic scaling algorithm) 
exports.ImageResizeNN = raylib_1.default.ImageResizeNN; //Resize image (Nearest-Neighbor scaling algorithm) 
exports.ImageResizeCanvas = raylib_1.default.ImageResizeCanvas; //Resize canvas and fill with color 
exports.ImageMipmaps = raylib_1.default.ImageMipmaps; //Generate all mipmap levels for a provided image 
exports.ImageDither = raylib_1.default.ImageDither; //Dither image data to 16bpp or lower (Floyd-Steinberg dithering) 
exports.ImageExtractPalette = raylib_1.default.ImageExtractPalette; //Extract color palette from image to maximum size (memory should be freed) 
exports.ImageText = raylib_1.default.ImageText; //Create an image from text (default font) 
exports.ImageTextEx = raylib_1.default.ImageTextEx; //Create an image from text (custom sprite font) 
exports.ImageDraw = raylib_1.default.ImageDraw; //Draw a source image within a destination image 
exports.ImageDrawRectangle = raylib_1.default.ImageDrawRectangle; //Draw rectangle within an image 
exports.ImageDrawRectangleLines = raylib_1.default.ImageDrawRectangleLines; //Draw rectangle lines within an image 
exports.ImageDrawText = raylib_1.default.ImageDrawText; //Draw text (default font) within an image (destination) 
exports.ImageDrawTextEx = raylib_1.default.ImageDrawTextEx; //Draw text (custom sprite font) within an image (destination) 
exports.ImageFlipVertical = raylib_1.default.ImageFlipVertical; //Flip image vertically 
exports.ImageFlipHorizontal = raylib_1.default.ImageFlipHorizontal; //Flip image horizontally 
exports.ImageRotateCW = raylib_1.default.ImageRotateCW; //Rotate image clockwise 90deg 
exports.ImageRotateCCW = raylib_1.default.ImageRotateCCW; //Rotate image counter-clockwise 90deg 
exports.ImageColorTint = raylib_1.default.ImageColorTint; //Modify image color: tint 
exports.ImageColorInvert = raylib_1.default.ImageColorInvert; //Modify image color: invert 
exports.ImageColorGrayscale = raylib_1.default.ImageColorGrayscale; //Modify image color: grayscale 
exports.ImageColorContrast = raylib_1.default.ImageColorContrast; //Modify image color: contrast (-100 to 100) 
exports.ImageColorBrightness = raylib_1.default.ImageColorBrightness; //Modify image color: brightness (-255 to 255) 
exports.ImageColorReplace = raylib_1.default.ImageColorReplace; //Modify image color: replace color 
exports.GenImageColor = raylib_1.default.GenImageColor; //Generate image: plain color 
exports.GenImageGradientV = raylib_1.default.GenImageGradientV; //Generate image: vertical gradient 
exports.GenImageGradientH = raylib_1.default.GenImageGradientH; //Generate image: horizontal gradient 
exports.GenImageGradientRadial = raylib_1.default.GenImageGradientRadial; //Generate image: radial gradient 
exports.GenImageChecked = raylib_1.default.GenImageChecked; //Generate image: checked 
exports.GenImageWhiteNoise = raylib_1.default.GenImageWhiteNoise; //Generate image: white noise 
exports.GenImagePerlinNoise = raylib_1.default.GenImagePerlinNoise; //Generate image: perlin noise 
exports.GenImageCellular = raylib_1.default.GenImageCellular; //Generate image: cellular algorithm. Bigger tileSize means bigger cells 
exports.GenTextureMipmaps = raylib_1.default.GenTextureMipmaps; //Generate GPU mipmaps for a texture 
exports.SetTextureFilter = raylib_1.default.SetTextureFilter; //Set texture scaling filter mode 
exports.SetTextureWrap = raylib_1.default.SetTextureWrap; //Set texture wrapping mode 
exports.DrawTexture = raylib_1.default.DrawTexture; //Draw a Texture2D 
exports.DrawTextureV = raylib_1.default.DrawTextureV; //Draw a Texture2D with position defined as Vector2 
exports.DrawTextureEx = raylib_1.default.DrawTextureEx; //Draw a Texture2D with extended parameters 
exports.DrawTextureRec = raylib_1.default.DrawTextureRec; //Draw a part of a texture defined by a rectangle 
exports.DrawTextureQuad = raylib_1.default.DrawTextureQuad; //Draw texture quad with tiling and offset parameters 
exports.DrawTexturePro = raylib_1.default.DrawTexturePro; //Draw a part of a texture defined by a rectangle with 'pro' parameters 
exports.DrawTextureNPatch = raylib_1.default.DrawTextureNPatch; //Draws a texture (or part of it) that stretches or shrinks nicely 

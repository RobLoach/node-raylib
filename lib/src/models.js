"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var raylib_1 = require("./bindings/raylib");
exports.DrawLine3D = raylib_1.default.DrawLine3D; //Draw a line in 3D world space 
exports.DrawCircle3D = raylib_1.default.DrawCircle3D; //Draw a circle in 3D world space 
exports.DrawCube = raylib_1.default.DrawCube; //Draw cube 
exports.DrawCubeV = raylib_1.default.DrawCubeV; //Draw cube (Vector version) 
exports.DrawCubeWires = raylib_1.default.DrawCubeWires; //Draw cube wires 
exports.DrawCubeWiresV = raylib_1.default.DrawCubeWiresV; //Draw cube wires (Vector version) 
exports.DrawCubeTexture = raylib_1.default.DrawCubeTexture; //Draw cube textured 
exports.DrawSphere = raylib_1.default.DrawSphere; //Draw sphere 
exports.DrawSphereEx = raylib_1.default.DrawSphereEx; //Draw sphere with extended parameters 
exports.DrawSphereWires = raylib_1.default.DrawSphereWires; //Draw sphere wires 
exports.DrawCylinder = raylib_1.default.DrawCylinder; //Draw a cylinder/cone 
exports.DrawCylinderWires = raylib_1.default.DrawCylinderWires; //Draw a cylinder/cone wires 
exports.DrawPlane = raylib_1.default.DrawPlane; //Draw a plane XZ 
exports.DrawRay = raylib_1.default.DrawRay; //Draw a ray line 
exports.DrawGrid = raylib_1.default.DrawGrid; //Draw a grid (centered at (0, 0, 0)) 
exports.DrawGizmo = raylib_1.default.DrawGizmo; //Draw simple gizmo 
exports.LoadModel = raylib_1.default.LoadModel; //Load model from files (meshes and materials) 
exports.LoadModelFromMesh = raylib_1.default.LoadModelFromMesh; //Load model from generated mesh (default material) 
exports.UnloadModel = raylib_1.default.UnloadModel; //Unload model from memory (RAM and/or VRAM) 
exports.LoadMeshes = raylib_1.default.LoadMeshes; //Load meshes from model file 
exports.ExportMesh = raylib_1.default.ExportMesh; //Export mesh data to file 
exports.UnloadMesh = raylib_1.default.UnloadMesh; //Unload mesh from memory (RAM and/or VRAM) 
exports.LoadMaterials = raylib_1.default.LoadMaterials; //Load materials from model file 
exports.LoadMaterialDefault = raylib_1.default.LoadMaterialDefault; //Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps) 
exports.UnloadMaterial = raylib_1.default.UnloadMaterial; //Unload material from GPU memory (VRAM) 
exports.SetMaterialTexture = raylib_1.default.SetMaterialTexture; //Set texture for a material map type (MAP_DIFFUSE, MAP_SPECULAR...) 
exports.SetModelMeshMaterial = raylib_1.default.SetModelMeshMaterial; //Set material for a mesh 
exports.LoadModelAnimations = raylib_1.default.LoadModelAnimations; //Load model animations from file 
exports.UpdateModelAnimation = raylib_1.default.UpdateModelAnimation; //Update model animation pose 
exports.UnloadModelAnimation = raylib_1.default.UnloadModelAnimation; //Unload animation data 
exports.IsModelAnimationValid = raylib_1.default.IsModelAnimationValid; //Check model animation skeleton match 
exports.GenMeshPoly = raylib_1.default.GenMeshPoly; //Generate polygonal mesh 
exports.GenMeshPlane = raylib_1.default.GenMeshPlane; //Generate plane mesh (with subdivisions) 
exports.GenMeshCube = raylib_1.default.GenMeshCube; //Generate cuboid mesh 
exports.GenMeshSphere = raylib_1.default.GenMeshSphere; //Generate sphere mesh (standard sphere) 
exports.GenMeshHemiSphere = raylib_1.default.GenMeshHemiSphere; //Generate half-sphere mesh (no bottom cap) 
exports.GenMeshCylinder = raylib_1.default.GenMeshCylinder; //Generate cylinder mesh 
exports.GenMeshTorus = raylib_1.default.GenMeshTorus; //Generate torus mesh 
exports.GenMeshKnot = raylib_1.default.GenMeshKnot; //Generate trefoil knot mesh 
exports.GenMeshHeightmap = raylib_1.default.GenMeshHeightmap; //Generate heightmap mesh from image data 
exports.GenMeshCubicmap = raylib_1.default.GenMeshCubicmap; //Generate cubes-based map mesh from image data 
exports.MeshBoundingBox = raylib_1.default.MeshBoundingBox; //Compute mesh bounding box limits 
exports.MeshTangents = raylib_1.default.MeshTangents; //Compute mesh tangents 
exports.MeshBinormals = raylib_1.default.MeshBinormals; //Compute mesh binormals 
exports.DrawModel = raylib_1.default.DrawModel; //Draw a model (with texture if set) 
exports.DrawModelEx = raylib_1.default.DrawModelEx; //Draw a model with extended parameters 
exports.DrawModelWires = raylib_1.default.DrawModelWires; //Draw a model wires (with texture if set) 
exports.DrawModelWiresEx = raylib_1.default.DrawModelWiresEx; //Draw a model wires (with texture if set) with extended parameters 
exports.DrawBoundingBox = raylib_1.default.DrawBoundingBox; //Draw bounding box (wires) 
exports.DrawBillboard = raylib_1.default.DrawBillboard; //Draw a billboard texture 
exports.DrawBillboardRec = raylib_1.default.DrawBillboardRec; //Draw a billboard texture defined by sourceRec 
exports.CheckCollisionSpheres = raylib_1.default.CheckCollisionSpheres; //Detect collision between two spheres 
exports.CheckCollisionBoxes = raylib_1.default.CheckCollisionBoxes; //Detect collision between two bounding boxes 
exports.CheckCollisionBoxSphere = raylib_1.default.CheckCollisionBoxSphere; //Detect collision between box and sphere 
exports.CheckCollisionRaySphere = raylib_1.default.CheckCollisionRaySphere; //Detect collision between ray and sphere 
exports.CheckCollisionRaySphereEx = raylib_1.default.CheckCollisionRaySphereEx; //Detect collision between ray and sphere, returns collision point 
exports.CheckCollisionRayBox = raylib_1.default.CheckCollisionRayBox; //Detect collision between ray and box 
exports.GetCollisionRayModel = raylib_1.default.GetCollisionRayModel; //Get collision info between ray and model 
exports.GetCollisionRayTriangle = raylib_1.default.GetCollisionRayTriangle; //Get collision info between ray and triangle 
exports.GetCollisionRayGround = raylib_1.default.GetCollisionRayGround; //Get collision info between ray and ground plane (Y-normal plane) 

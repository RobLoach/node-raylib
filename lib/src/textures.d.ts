import { Color } from "./types/colors";
import { Vector2, Vector4, Rectangle, NPatchInfo } from "./types/maths";
import { Image, Texture2D, TextureCubemap, Font, RenderTexture2D } from "./types/texture";
export default interface Textures {
    LoadImage: (fileName: string) => Image;
    LoadImageEx: (pixels: Color, width: number, height: number) => Image;
    LoadImagePro: (data: any, width: number, height: number, format: number) => Image;
    LoadImageRaw: (fileName: string, width: number, height: number, format: number, headerSize: number) => Image;
    ExportImage: (image: Image, fileName: string) => void;
    ExportImageAsCode: (image: Image, fileName: string) => void;
    LoadTexture: (fileName: string) => Texture2D;
    LoadTextureFromImage: (image: Image) => Texture2D;
    LoadTextureCubemap: (image: Image, layoutType: number) => TextureCubemap;
    LoadRenderTexture: (width: number, height: number) => RenderTexture2D;
    UnloadImage: (image: Image) => void;
    UnloadTexture: (texture: Texture2D) => void;
    UnloadRenderTexture: (target: RenderTexture2D) => void;
    GetImageData: (image: Image) => Color;
    GetImageDataNormalized: (image: Image) => Vector4;
    GetPixelDataSize: (width: number, height: number, format: number) => number;
    GetTextureData: (texture: Texture2D) => Image;
    GetScreenData: () => Image;
    UpdateTexture: (texture: Texture2D, pixels: any) => void;
    ImageCopy: (image: Image) => Image;
    ImageToPOT: (image: Image, fillColor: Color) => void;
    ImageFormat: (image: Image, newFormat: number) => void;
    ImageAlphaMask: (image: Image, alphaMask: Image) => void;
    ImageAlphaClear: (image: Image, color: Color, threshold: number) => void;
    ImageAlphaCrop: (image: Image, threshold: number) => void;
    ImageAlphaPremultiply: (image: Image) => void;
    ImageCrop: (image: Image, crop: Rectangle) => void;
    ImageResize: (image: Image, newWidth: number, newHeight: number) => void;
    ImageResizeNN: (image: Image, newHeight: number, newWidth: number) => void;
    ImageResizeCanvas: (image: Image, newWidth: number, newHeight: number, offsetX: number, offsetY: number, color: Color) => void;
    ImageMipmaps: (image: Image) => void;
    ImageDither: (image: Image, rBpp: number, gBpp: number, bBpp: number, aBpp: number) => void;
    ImageExtractPalette: (image: Image, maxPaletteSize: number, extractCount: number) => Color;
    ImageText: (text: string, fontSize: number, color: Color) => Image;
    ImageTextEx: (font: Font, text: string, fontSize: number, spacing: number, tint: Color) => Image;
    ImageDraw: (dst: Image, src: Image, srcRec: Rectangle, dstRec: Rectangle) => void;
    ImageDrawRectangle: (dst: Image, rec: Rectangle, color: Color) => void;
    ImageDrawRectangleLines: (dst: Image, rec: Rectangle, thick: number, color: Color) => void;
    ImageDrawText: (dst: Image, position: Vector2, text: string, fontSize: number, color: Color) => void;
    ImageDrawTextEx: (dst: Image, position: Vector2, font: Font, text: string, fontSize: number, spacing: number, color: Color) => void;
    ImageFlipVertical: (image: Image) => void;
    ImageFlipHorizontal: (image: Image) => void;
    ImageRotateCW: (image: Image) => void;
    ImageRotateCCW: (image: Image) => void;
    ImageColorTint: (image: Image, color: Color) => void;
    ImageColorInvert: (image: Image) => void;
    ImageColorGrayscale: (image: Image) => void;
    ImageColorContrast: (image: Image, contrast: number) => void;
    ImageColorBrightness: (image: Image, brightness: number) => void;
    ImageColorReplace: (image: Image, color: Color, replace: Color) => void;
    GenImageColor: (width: number, height: number, color: Color) => Image;
    GenImageGradientV: (width: number, height: number, top: Color, bottom: Color) => Image;
    GenImageGradientH: (width: number, height: number, left: Color, right: Color) => Image;
    GenImageGradientRadial: (width: number, height: number, density: number, inner: Color, outer: Color) => Image;
    GenImageChecked: (width: number, height: number, checksX: number, checksY: number, col1: Color, col2: Color) => Image;
    GenImageWhiteNoise: (width: number, height: number, factor: number) => Image;
    GenImagePerlinNoise: (width: number, height: number, offsetX: number, offsetY: number, scale: number) => Image;
    GenImageCellular: (width: number, height: number, tileSize: number) => Image;
    GenTextureMipmaps: (texture: Texture2D) => void;
    SetTextureFilter: (texture: Texture2D, filterMode: number) => void;
    SetTextureWrap: (texture: Texture2D, wrapMode: number) => void;
    DrawTexture: (texture: Texture2D, posX: number, posY: number, tint: Color) => void;
    DrawTextureV: (texture: Texture2D, position: Vector2, tint: Color) => void;
    DrawTextureEx: (texture: Texture2D, position: Vector2, rotation: number, scale: number, tint: Color) => void;
    DrawTextureRec: (texture: Texture2D, sourceRec: Rectangle, position: Vector2, tint: Color) => void;
    DrawTextureQuad: (texture: Texture2D, tiling: Vector2, offset: Vector2, quad: Rectangle, tint: Color) => void;
    DrawTexturePro: (texture: Texture2D, sourceRec: Rectangle, destRec: Rectangle, origin: Vector2, rotation: number, tint: Color) => void;
    DrawTextureNPatch: (texture: Texture2D, nPatchInfo: NPatchInfo, destRec: Rectangle, origin: Vector2, rotation: number, tint: Color) => void;
}

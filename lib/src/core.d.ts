import { Color } from "./types/colors";
import { Vector2, Vector3, Vector4, Ray, Matrix } from "./types/maths";
import { Camera, Camera2D, Camera3D } from "./types/camera";
import { Image, RenderTexture2D } from "./types/texture";
import { TraceLogCallback } from "./types/misc";
export default interface Core {
    InitWindow: (width: number, height: number, title: string) => void;
    WindowShouldClose: () => boolean;
    CloseWindow: () => void;
    IsWindowReady: () => boolean;
    IsWindowMinimized: () => boolean;
    IsWindowResized: () => boolean;
    IsWindowHidden: () => boolean;
    ToggleFullscreen: () => void;
    UnhideWindow: () => void;
    HideWindow: () => void;
    SetWindowIcon: (image: Image) => void;
    SetWindowTitle: (title: string) => void;
    SetWindowPosition: (x: number, y: number) => void;
    SetWindowMonitor: (monitor: number) => void;
    SetWindowMinSize: (width: number, height: number) => void;
    SetWindowSize: (width: number, height: number) => void;
    GetWindowHandle: () => void;
    GetScreenWidth: () => number;
    GetScreenHeight: () => number;
    GetMonitorCount: () => number;
    GetMonitorWidth: (monitor: number) => number;
    GetMonitorHeight: (monitor: number) => number;
    GetMonitorPhysicalWidth: (monitor: number) => number;
    GetMonitorPhysicalHeight: (monitor: number) => number;
    GetMonitorName: (monitor: number) => string;
    GetClipboardText: () => string;
    SetClipboardText: (text: string) => void;
    ShowCursor: () => void;
    HideCursor: () => void;
    IsCursorHidden: () => boolean;
    EnableCursor: () => void;
    DisableCursor: () => void;
    ClearBackground: (color: Color) => void;
    BeginDrawing: () => void;
    EndDrawing: () => void;
    BeginMode2D: (camera: Camera2D) => void;
    EndMode2D: () => void;
    BeginMode3D: (camera: Camera3D) => void;
    EndMode3D: () => void;
    BeginTextureMode: (target: RenderTexture2D) => void;
    EndTextureMode: () => void;
    GetMouseRay: (mousePosition: Vector2, camera: Camera) => Ray;
    GetWorldToScreen: (position: Vector3, camera: Camera) => Vector2;
    GetCameraMatrix: (camera: Camera) => Matrix;
    SetTargetFPS: (fps: number) => void;
    GetFPS: () => number;
    GetFrameTime: () => number;
    GetTime: () => number;
    ColorToInt: (color: Color) => number;
    ColorNormalize: (color: Color) => Vector4;
    ColorToHSV: (color: Color) => Vector3;
    ColorFromHSV: (hsv: Vector3) => Color;
    GetColor: (hexValue: number) => Color;
    Fade: (color: Color, alpha: number) => Color;
    SetConfigFlags: (flags: number) => void;
    SetTraceLogLevel: (logType: number) => void;
    SetTraceLogExit: (logType: number) => void;
    SetTraceLogCallback: (callback: TraceLogCallback) => void;
    TraceLog: (logType: number, text: string, ...args: any) => void;
    TakeScreenshot: (fileName: string) => void;
    GetRandomValue: (min: number, max: number) => number;
    FileExists: (fileName: string) => boolean;
    IsFileExtension: (fileName: string, ext: string) => boolean;
    GetExtension: (fileName: string) => string;
    GetFileName: (filePath: string) => string;
    GetFileNameWithoutExt: (filePath: string) => string;
    GetDirectoryPath: (fileName: string) => string;
    GetWorkingDirectory: () => string;
    GetDirectoryFiles: (dirPath: string, count: number) => number;
    ClearDirectoryFiles: () => void;
    ChangeDirectory: (dir: string) => boolean;
    IsFileDropped: () => boolean;
    GetDroppedFiles: (count: number) => number;
    ClearDroppedFiles: () => void;
    GetFileModTime: (fileName: string) => number;
    StorageSaveValue: (position: number, value: number) => void;
    StorageLoadValue: (position: number) => number;
    OpenURL: (url: string) => void;
    IsKeyPressed: (key: number) => boolean;
    IsKeyDown: (key: number) => boolean;
    IsKeyReleased: (key: number) => boolean;
    IsKeyUp: (key: number) => boolean;
    GetKeyPressed: () => number;
    SetExitKey: (key: number) => void;
    IsGamepadAvailable: (gamepad: number) => boolean;
    IsGamepadName: (gamepad: number, name: string) => boolean;
    GetGamepadName: (gamepad: number) => string;
    IsGamepadButtonPressed: (gamepad: number, button: number) => boolean;
    IsGamepadButtonDown: (gamepad: number, button: number) => boolean;
    IsGamepadButtonReleased: (gamepad: number, button: number) => boolean;
    IsGamepadButtonUp: (gamepad: number, button: number) => boolean;
    GetGamepadButtonPressed: () => number;
    GetGamepadAxisCount: (gamepad: number) => number;
    GetGamepadAxisMovement: (gamepad: number, axis: number) => number;
    IsMouseButtonPressed: (button: number) => boolean;
    IsMouseButtonDown: (button: number) => boolean;
    IsMouseButtonReleased: (button: number) => boolean;
    IsMouseButtonUp: (button: number) => boolean;
    GetMouseX: () => number;
    GetMouseY: () => number;
    GetMousePosition: () => Vector2;
    SetMousePosition: (x: number, y: number) => void;
    SetMouseOffset: (offsetX: number, offsetY: number) => void;
    SetMouseScale: (scaleX: number, scaleY: number) => void;
    GetMouseWheelMove: () => number;
    GetTouchX: () => number;
    GetTouchY: () => number;
    GetTouchPosition: (index: number) => Vector2;
    SetGesturesEnabled: (gestureFlags: number) => void;
    IsGestureDetected: (gesture: number) => boolean;
    GetGestureDetected: () => number;
    GetTouchPointsCount: () => number;
    GetGestureHoldDuration: () => number;
    GetGestureDragVector: () => Vector2;
    GetGestureDragAngle: () => number;
    GetGesturePinchVector: () => Vector2;
    GetGesturePinchAngle: () => number;
    SetCameraMode: (camera: Camera, mode: number) => void;
    UpdateCamera: (camera: Camera) => void;
    SetCameraPanControl: (panKey: number) => void;
    SetCameraAltControl: (altKey: number) => void;
    SetCameraSmoothZoomControl: (szKey: number) => void;
    SetCameraMoveControls: (frontKey: number, backKey: number, rightKey: number, leftKey: number, upKey: number, downKey: number) => void;
}
